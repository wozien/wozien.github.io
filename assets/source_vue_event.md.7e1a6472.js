import{o as n,c as s,a}from"./app.b54b71cc.js";const t='{"title":"事件Event","description":"","frontmatter":{},"headers":[{"level":2,"title":"模版的事件编译","slug":"模版的事件编译"},{"level":2,"title":"DOM事件","slug":"dom事件"},{"level":2,"title":"自定义事件","slug":"自定义事件"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"source/vue/event.md","lastUpdated":1622476078318}',p={},o=a('<h1 id="事件event"><a class="header-anchor" href="#事件event" aria-hidden="true">#</a> 事件Event</h1><p>Vue允许我们在模版上用<code>v-on</code>或<code>@</code>为元素添加DOM事件，并且可以为组件元素添加自定义的事件。现在通过源码角度看看Vue是怎么处理事件的绑定和执行的。</p><h2 id="模版的事件编译"><a class="header-anchor" href="#模版的事件编译" aria-hidden="true">#</a> 模版的事件编译</h2><p>先通过一个例子看看事件的基本用法：</p><div class="language-js"><pre><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token punctuation">{</span>\n  template<span class="token operator">:</span> <span class="token string">&#39;&lt;button @click=&quot;handleClick&quot;&gt;click&lt;/button&gt;&#39;</span><span class="token punctuation">,</span>\n  methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;child click&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;select&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  el<span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;div&gt;\n      &lt;Child @select=&quot;handleSelect&quot; @click.native=&quot;handleClick&quot;&gt;&lt;/Child&gt;\n    &lt;/div&gt;\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;parent click&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">handleSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;parent select&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  components<span class="token operator">:</span> <span class="token punctuation">{</span> Child <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>上面例子利用模版的形式给对应的元素和组件绑定事件。首先，Vue会编译模版，会把元素的事件和组件的自定义事件都放在<code>on</code>对象上，把组件的原生事件放在<code>nativeOn</code>对象上。所以，上面的例子编译后的<code>render</code>函数大概如下：</p><div class="language-js"><pre><code><span class="token comment">// child 的render</span>\n<span class="token keyword">with</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> on<span class="token operator">:</span> <span class="token punctuation">{</span> click<span class="token operator">:</span> handleClick <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Vue 实例的render</span>\n<span class="token keyword">with</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">_c</span><span class="token punctuation">(</span>\n    <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>\n      <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;Child&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        on<span class="token operator">:</span> <span class="token punctuation">{</span> select<span class="token operator">:</span> handleSelect <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        nativeOn<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token function-variable function">click</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">handleClick</span><span class="token punctuation">(</span>$event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token number">1</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><code>_c</code>方法是Vue实例的内置方法，它用来创建一个虚拟节点，和<code>createElement</code>方法基本一样。</p><h2 id="dom事件"><a class="header-anchor" href="#dom事件" aria-hidden="true">#</a> DOM事件</h2><p>我们是通过把组件生成的虚拟节点进行<code>patch</code>后更新DOM的，所以对于DOM事件的绑定就在该过程处理的。在<code>patch</code>的过程中会调用<code>createElm</code>生成vnode的真实DOM，在该方法有一段代码：</p><div class="language-js"><pre><code><span class="token comment">// 递归创建vnode的children对应的dom节点，并插入到vnode.elm</span>\n<span class="token function">createChildren</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> children<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 处理data属性</span>\n  <span class="token function">invokeCreateHooks</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 把vnode创建的node插入到真实的dom</span>\n<span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>在处理完子节点的创建后，会调用<code>invokeCreateHooks</code>方法触发自身和模块的<code>create</code>钩子：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">invokeCreateHooks</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> insertedVnodeQueue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>create<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    cbs<span class="token punctuation">.</span>create<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>emptyNode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  i <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>hook <span class="token comment">// Reuse variable</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>create<span class="token punctuation">)</span><span class="token punctuation">)</span> i<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>emptyNode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>insert<span class="token punctuation">)</span><span class="token punctuation">)</span> insertedVnodeQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>在两个节点进行<code>patch</code>过程会调用一系列的钩子函数，比如在生成DOM的时候我们要处理样式，属性，事件等这些都是在模块的<code>create</code>钩子进行的，我们来看下模块对应事件钩子的处理，它定义在<code>src/platforms/web/runtime/modules/events.js</code>:</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  create<span class="token operator">:</span> updateDOMListeners<span class="token punctuation">,</span>\n  update<span class="token operator">:</span> updateDOMListeners\n<span class="token punctuation">}</span>\n</code></pre></div><p>在<code>create</code>和<code>update</code>阶段都会调用<code>updateDOMListeners</code>方法：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">updateDOMListeners</span> <span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token operator">:</span> VNodeWithData<span class="token punctuation">,</span> vnode<span class="token operator">:</span> VNodeWithData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>on<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isUndef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>on<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> on <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>on <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">const</span> oldOn <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>on <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  target <span class="token operator">=</span> vnode<span class="token punctuation">.</span>elm\n  <span class="token function">normalizeEvents</span><span class="token punctuation">(</span>on<span class="token punctuation">)</span>\n  <span class="token function">updateListeners</span><span class="token punctuation">(</span>on<span class="token punctuation">,</span> oldOn<span class="token punctuation">,</span> add<span class="token punctuation">,</span> remove<span class="token punctuation">,</span> createOnceHandler<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>context<span class="token punctuation">)</span>\n  target <span class="token operator">=</span> <span class="token keyword">undefined</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>这个方法先拿出新旧节点的事件对象<code>on</code>和<code>oldOn</code>，把操作对象<code>target</code>设置成<code>vnode.elm</code>也就是当前vnode对应的真实DOM，<code>add</code>和<code>remove</code>是对元素的事件绑定和移除：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string<span class="token punctuation">,</span> handler<span class="token operator">:</span> Function<span class="token punctuation">,</span> capture<span class="token operator">:</span> boolean<span class="token punctuation">,</span> passive<span class="token operator">:</span> boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> supportsPassive <span class="token operator">?</span> <span class="token punctuation">{</span> capture<span class="token punctuation">,</span> passive <span class="token punctuation">}</span> <span class="token operator">:</span> capture<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string<span class="token punctuation">,</span> handler<span class="token operator">:</span> Function<span class="token punctuation">,</span> capture<span class="token operator">:</span> boolean<span class="token punctuation">,</span> _target<span class="token operator">?</span><span class="token operator">:</span> HTMLElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">(</span>_target <span class="token operator">||</span> target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> handler<span class="token punctuation">.</span>_wrapper <span class="token operator">||</span> handler<span class="token punctuation">,</span> capture<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>最后调用<code>updateListeners</code>方法进行事件的绑定，这个方法定义在<code>src/core/vdom/helpers/update-listeners.js</code>:</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">updateListeners</span> <span class="token punctuation">(</span>\n  <span class="token parameter">on<span class="token operator">:</span> Object<span class="token punctuation">,</span>\n  oldOn<span class="token operator">:</span> Object<span class="token punctuation">,</span>\n  add<span class="token operator">:</span> Function<span class="token punctuation">,</span>\n  remove<span class="token operator">:</span> Function<span class="token punctuation">,</span>\n  createOnceHandler<span class="token operator">:</span> Function<span class="token punctuation">,</span>\n  vm<span class="token operator">:</span> Component</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> name<span class="token punctuation">,</span> def<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> old<span class="token punctuation">,</span> event\n  <span class="token comment">// 新增的事件</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>name <span class="token keyword">in</span> on<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    def <span class="token operator">=</span> cur <span class="token operator">=</span> on<span class="token punctuation">[</span>name<span class="token punctuation">]</span>\n    old <span class="token operator">=</span> oldOn<span class="token punctuation">[</span>name<span class="token punctuation">]</span>\n    event <span class="token operator">=</span> <span class="token function">normalizeEvent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>\n    <span class="token comment">/* istanbul ignore if */</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>__WEEX__ <span class="token operator">&amp;&amp;</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span>def<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      cur <span class="token operator">=</span> def<span class="token punctuation">.</span>handler\n      event<span class="token punctuation">.</span>params <span class="token operator">=</span> def<span class="token punctuation">.</span>params\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Invalid handler for event &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;: got </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span> <span class="token function">String</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        vm\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>fns<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        cur <span class="token operator">=</span> on<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createFnInvoker</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>once<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        cur <span class="token operator">=</span> on<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createOnceHandler</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>name<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> event<span class="token punctuation">.</span>capture<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token function">add</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>name<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> event<span class="token punctuation">.</span>capture<span class="token punctuation">,</span> event<span class="token punctuation">.</span>passive<span class="token punctuation">,</span> event<span class="token punctuation">.</span>params<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> old<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 这里只要修改回调函数的引用即可，不用操作DOM</span>\n      old<span class="token punctuation">.</span>fns <span class="token operator">=</span> cur\n      on<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> old\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 卸载的事件</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>name <span class="token keyword">in</span> oldOn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>on<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      event <span class="token operator">=</span> <span class="token function">normalizeEvent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>\n      <span class="token function">remove</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>name<span class="token punctuation">,</span> oldOn<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>capture<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>这个方法先循环<code>on</code>中的每一个方法，如果这个方法不存在<code>oldOn</code>表示是一个新增的方法，然后用<code>createFnInvoker</code>方法创建对应事件的回调函数，参数是我们用户绑定的回调函数：</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createFnInvoker</span> <span class="token punctuation">(</span><span class="token parameter">fns<span class="token operator">:</span> Function <span class="token operator">|</span> Array<span class="token operator">&lt;</span>Function<span class="token operator">&gt;</span><span class="token punctuation">,</span> vm<span class="token operator">:</span> <span class="token operator">?</span>Component</span><span class="token punctuation">)</span><span class="token operator">:</span> Function <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">invoker</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> fns <span class="token operator">=</span> invoker<span class="token punctuation">.</span>fns\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>fns<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> cloned <span class="token operator">=</span> fns<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cloned<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">invokeWithErrorHandling</span><span class="token punctuation">(</span>cloned<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> arguments<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">v-on handler</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// return handler return value for single handlers</span>\n      <span class="token keyword">return</span> <span class="token function">invokeWithErrorHandling</span><span class="token punctuation">(</span>fns<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> arguments<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">v-on handler</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  invoker<span class="token punctuation">.</span>fns <span class="token operator">=</span> fns\n  <span class="token keyword">return</span> invoker\n<span class="token punctuation">}</span>\n</code></pre></div><p>因为我们可以为事件绑定多个函数回调的，所以要考虑<code>cur</code>是一个回调函数数组的情况。<code>createFnInvoker</code>方法其实是对我们定义的回调的一个封装，并把这些回调存在返回结果的<code>fns</code>属性上。所以在Vue中事件触发的回调其实是执行<code>invoker</code>方法，在方法内部通过<code>fns</code>获取我们定义的方法并执行。</p><p>那Vue为什么直接绑定我们用户定义的回调呢？原因在下面一段处理：</p><div class="language-js"><pre><code><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> old<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这里只要修改回调函数的引用即可，不用操作DOM</span>\n  old<span class="token punctuation">.</span>fns <span class="token operator">=</span> cur\n  on<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> old\n<span class="token punctuation">}</span>\n</code></pre></div><p>当我们是更新状态从而触发事件的更新的话，直接修改<code>invoker</code>方法的<code>fns</code>指定的回调即可，免去操作真实的DOM去绑定或者移除事件监听。接着再循环<code>oldOn</code>的每个事件，如果不存在<code>on</code>中就代表移除这个事件的监听。</p><h2 id="自定义事件"><a class="header-anchor" href="#自定义事件" aria-hidden="true">#</a> 自定义事件</h2><p>在组件上可以绑定原生和自定义的事件，对于原生的事件对象<code>nativeOn</code>会在组件构造阶段赋值给<code>on</code>，然后在<code>create</code>的钩子函数中和DOM事件的处理逻辑是一样的。在<code>createComponent</code>函数中，有这样一段逻辑:</p><div class="language-js"><pre><code><span class="token keyword">const</span> listeners <span class="token operator">=</span> data<span class="token punctuation">.</span>on\ndata<span class="token punctuation">.</span>on <span class="token operator">=</span> data<span class="token punctuation">.</span>nativeOn\n\n<span class="token comment">//...</span>\n\n<span class="token comment">// 返回组件的虚拟节点</span>\n<span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">vue-component-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Ctor<span class="token punctuation">.</span>cid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  data<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> Ctor<span class="token punctuation">,</span> propsData<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> children <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  asyncFactory\n<span class="token punctuation">)</span>\n</code></pre></div><p>它会把自定义事件对象赋值给<code>listeners</code>作为虚拟节点的<code>componentOptions</code>属性。我们都知道在<code>patch</code>过程中会调用组件虚拟节点的<code>init</code>钩子并创建组件的实例。然后在实例创建入口<code>vm._init()</code>方对组件实例的配置进行处理:</p><div class="language-js"><pre><code><span class="token comment">// 处理组件实例的配置</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initInternalComponent</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token operator">:</span> Component<span class="token punctuation">,</span> options<span class="token operator">:</span> InternalComponentOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 把组件构造函数的options合并到组件实例</span>\n  <span class="token keyword">const</span> opts <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>options<span class="token punctuation">)</span>\n  <span class="token comment">// doing this because it&#39;s faster than dynamic enumeration.</span>\n  <span class="token keyword">const</span> parentVnode <span class="token operator">=</span> options<span class="token punctuation">.</span>_parentVnode\n  opts<span class="token punctuation">.</span>parent <span class="token operator">=</span> options<span class="token punctuation">.</span>parent\n  opts<span class="token punctuation">.</span>_parentVnode <span class="token operator">=</span> parentVnode\n\n  <span class="token keyword">const</span> vnodeComponentOptions <span class="token operator">=</span> parentVnode<span class="token punctuation">.</span>componentOptions\n  opts<span class="token punctuation">.</span>propsData <span class="token operator">=</span> vnodeComponentOptions<span class="token punctuation">.</span>propsData\n  opts<span class="token punctuation">.</span>_parentListeners <span class="token operator">=</span> vnodeComponentOptions<span class="token punctuation">.</span>listeners\n  opts<span class="token punctuation">.</span>_renderChildren <span class="token operator">=</span> vnodeComponentOptions<span class="token punctuation">.</span>children\n  opts<span class="token punctuation">.</span>_componentTag <span class="token operator">=</span> vnodeComponentOptions<span class="token punctuation">.</span>tag\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    opts<span class="token punctuation">.</span>render <span class="token operator">=</span> options<span class="token punctuation">.</span>render\n    opts<span class="token punctuation">.</span>staticRenderFns <span class="token operator">=</span> options<span class="token punctuation">.</span>staticRenderFns\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>很明显，Vue会把组件绑定的自定义事件对象赋值给配置对象的<code>_parentListeners</code>属性上。在接下来的事件初始化方法<code>initEvents</code>方法中，处理组件实例的事件：</p><div class="language-js"><pre><code><span class="token comment">// 在父组件模版中v-on绑定的事件注册到子组件的事件系统中</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initEvents</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token operator">:</span> Component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  vm<span class="token punctuation">.</span>_events <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>\n  vm<span class="token punctuation">.</span>_hasHookEvent <span class="token operator">=</span> <span class="token boolean">false</span>\n  <span class="token comment">// init parent attached events</span>\n  <span class="token keyword">const</span> listeners <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_parentListeners\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">updateComponentListeners</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>这个方法先创建<code>vm._events</code>空对象来管理实例的事件，然后把用户绑定的自定义事件对象作为<code>updateComponentListeners</code>方法参数并调用：</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">updateComponentListeners</span> <span class="token punctuation">(</span>\n  <span class="token parameter">vm<span class="token operator">:</span> Component<span class="token punctuation">,</span>\n  listeners<span class="token operator">:</span> Object<span class="token punctuation">,</span>\n  oldListeners<span class="token operator">:</span> <span class="token operator">?</span>Object</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  target <span class="token operator">=</span> vm\n  <span class="token function">updateListeners</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> oldListeners <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> add<span class="token punctuation">,</span> remove<span class="token punctuation">,</span> createOnceHandler<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>\n  target <span class="token operator">=</span> <span class="token keyword">undefined</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>该方法其实和DOM事件的处理逻辑一样都会<code>updateListeners</code>方法进行事件的绑定，不同的是<code>add</code>，<code>remove</code>和<code>createOnceHandler</code>方法的定义：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">remove</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">createOnceHandler</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> _target <span class="token operator">=</span> target\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">onceHandler</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      _target<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> onceHandler<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>对于事件的绑定是调用<code>vm.$on</code>方法，事件的移除是调用<code>vm.$off</code>方法，这两个方式都是Vue提供给用户操作实例事件系统的，它在Vue入口的<code>eventsMixin</code>注入到原型对象上：</p><div class="language-js"><pre><code> <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$on</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token operator">:</span> string <span class="token operator">|</span> Array<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">,</span> fn<span class="token operator">:</span> Function</span><span class="token punctuation">)</span><span class="token operator">:</span> Component <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> vm<span class="token operator">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> event<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      vm<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span>event<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>\n    <span class="token comment">// optimize hook:event cost by using a boolean flag marked at registration</span>\n    <span class="token comment">// instead of a hash lookup</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>hookRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      vm<span class="token punctuation">.</span>_hasHookEvent <span class="token operator">=</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> vm\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$off</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token operator">?</span><span class="token operator">:</span> string <span class="token operator">|</span> Array<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">,</span> fn<span class="token operator">?</span><span class="token operator">:</span> Function</span><span class="token punctuation">)</span><span class="token operator">:</span> Component <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> vm<span class="token operator">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>\n  <span class="token comment">// all</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    vm<span class="token punctuation">.</span>_events <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> vm\n  <span class="token punctuation">}</span>\n  <span class="token comment">// array of events</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> event<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      vm<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span>event<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> vm\n  <span class="token punctuation">}</span>\n  <span class="token comment">// specific event</span>\n  <span class="token keyword">const</span> cbs <span class="token operator">=</span> vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cbs<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> vm\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>\n    <span class="token keyword">return</span> vm\n  <span class="token punctuation">}</span>\n  <span class="token comment">// specific handler</span>\n  <span class="token keyword">let</span> cb\n  <span class="token keyword">let</span> i <span class="token operator">=</span> cbs<span class="token punctuation">.</span>length\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    cb <span class="token operator">=</span> cbs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>cb <span class="token operator">===</span> fn <span class="token operator">||</span> cb<span class="token punctuation">.</span>fn <span class="token operator">===</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      cbs<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> vm\n<span class="token punctuation">}</span>\n\n</code></pre></div><p>对于<code>$on</code>方法，如果事件<code>event</code>参数是一个数组，则递归调用<code>$on</code>方法对每个方法进行绑定。否则执行：</p><div class="language-js"><pre><code><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>\n</code></pre></div><p>把事件对应的回调函数push到事件队列。对于<code>$off</code>方法移除事件，要考虑的是没传参数，<code>event</code>是数组和有传回调函数的特殊情况。在移除对应的回调的时候，注意循环是从后面开始的，这样就不会造成<code>splice</code>截取后下标的问题。</p><p>另外，我们可以通过<code>vm.$emit</code>方法触发实例对应事件的回调函数，来看下它的定义:</p><div class="language-js"><pre><code><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$emit</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> Component <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> vm<span class="token operator">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>\n  <span class="token keyword">let</span> cbs <span class="token operator">=</span> vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>cbs<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    cbs <span class="token operator">=</span> cbs<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token function">toArray</span><span class="token punctuation">(</span>cbs<span class="token punctuation">)</span> <span class="token operator">:</span> cbs\n    <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token function">toArray</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">event handler for &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">`</span></span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> cbs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">invokeWithErrorHandling</span><span class="token punctuation">(</span>cbs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">,</span> args<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> vm\n<span class="token punctuation">}</span>\n</code></pre></div><p>这个方法很简单，首先在<code>vm._events</code>上根据事件名获取对应的回调队列，然后循环队列，把传给<code>$emit</code>方法的剩余参数作为回调的参数进行调用。</p><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>到现在，我们就了解Vue是如果处理事件系统的。对于DOM原生事件，会在<code>patch</code>过程的首次加载的<code>create</code>钩子和节点对比的<code>update</code>钩子进行处理。对于组件的自定义事件，会在创建实例的事件初始化<code>initEvents</code>方法进行处理。它们之间的区别就是<code>add</code>和<code>remove</code>方法对事件的绑定和移除不同，前者是操作原生的事件系统，后者是操作Vue实例的事件管理对象<code>_events</code>。</p><p>值得注意的是，我们平时开始利用自定义事件来进行父子组件的通行。会给我们一种错觉就是自定义事件的回调是存在父组件的实例中，其实通过源码分析知道回调函数是注入到子组件的事件系统，在子组件中通过<code>$emit</code>方法调用，只是回调函数定义在父组件，所以可以操作父组件的状态，从而达到父子组件的通行。</p>',49);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
