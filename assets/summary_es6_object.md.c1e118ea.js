import{o as n,c as s,b as a,d as p,e as t,a as o}from"./app.667a2bdf.js";const c='{"title":"对象扩展","description":"","frontmatter":{},"headers":[{"level":2,"title":"字面量语法扩展","slug":"字面量语法扩展"},{"level":2,"title":"新增对象方法","slug":"新增对象方法"},{"level":2,"title":"增量对象的原型","slug":"增量对象的原型"}],"relativePath":"summary/es6/object.md","lastUpdated":1624377307301}',e={},u=p("h1",{id:"对象扩展"},[p("a",{class:"header-anchor",href:"#对象扩展","aria-hidden":"true"},"#"),t(" 对象扩展")],-1),l=p("p",null,"在es6中通过多种方式来加强对象的使用，通过简单的语法扩展，来提供更多操作对象及与对象交互的方法。",-1),k=o('<h2 id="字面量语法扩展"><a class="header-anchor" href="#字面量语法扩展" aria-hidden="true">#</a> 字面量语法扩展</h2><p>当对象属性名和变量名相同时，赋值的时候可以省略变量名:</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">getObj</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">,</span>\n    age\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>对象方法定义的简写。省略 <code>function</code> 关键字和冒号：</p><div class="language-js"><pre><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;wozien&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// wozien</span>\n</code></pre></div><p>在es5中,如果想要通过计算得到属性名，只能通过对象加方括号的方式在定义变量属性，不能用点：</p><div class="language-js"><pre><code><span class="token keyword">const</span> lastName <span class="token operator">=</span> <span class="token string">&#39;last name&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;first name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;wozien&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nperson<span class="token punctuation">[</span>lastName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;zhang&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><p>在es6中，允许在对象字面量时用方括号来定义可计算的属性，扩展内允许任意的js表达式：</p><div class="language-js"><pre><code><span class="token keyword">const</span> lastName <span class="token operator">=</span> <span class="token string">&#39;last&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;first name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;wozien&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>lastName <span class="token operator">+</span> <span class="token string">&#39; name&#39;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;zhang&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="新增对象方法"><a class="header-anchor" href="#新增对象方法" aria-hidden="true">#</a> 新增对象方法</h2><p>利用 <code>Object.is</code> 判断两个值是否全相等：</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\n</code></pre></div><p>该方法基本和全等 <code>===</code> 相同，但是判断正负0和<code>NaN</code>有所区别：</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\n</code></pre></div><p>利用 <code>Object.assign</code> 合并对象：</p><div class="language-js"><pre><code><span class="token keyword">const</span> receiver <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nObject<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>\n  receiver<span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> <span class="token string">&#39;js&#39;</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;file.js&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> <span class="token string">&#39;css&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { type: &#39;css&#39;, name: &#39;file.js&#39; }</span>\n</code></pre></div><p>该方法会合并后面的对象到第一个对象，重复的属性值以最后一个对象为准。该方法为浅拷贝，如果属性值为对象，拷贝的是对象的引用。</p><h2 id="增量对象的原型"><a class="header-anchor" href="#增量对象的原型" aria-hidden="true">#</a> 增量对象的原型</h2><p>利用<code>Object.setPrototype()</code> 方法修改对象的原型：</p><div class="language-js"><pre><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;person&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;dog&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> friend <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>friend<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// person</span>\nObject<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>friend<span class="token punctuation">,</span> dog<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>friend<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// dog</span>\n</code></pre></div><p>利用 <code>super</code> 调用原型对象方法：</p><div class="language-js"><pre><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;person&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> friend <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;friend&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nObject<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>friend<span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>friend<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// friend</span>\n</code></pre></div><p>上面friend对象的原型设置为person，在friend的say方法中利用 <code>super.say</code> 调用了person的say方法。但是输出的结果却不是&#39;person&#39;。这是利用 <code>super</code> 调用原型方法的时候，会把方法的 <code>this</code> 对象指向<code>super</code> 调用环境的 <code>this</code> 对象。上面代码相当于:</p><div class="language-js"><pre><code>\n<span class="token comment">// ...</span>\n<span class="token keyword">let</span> friend <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;friend&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>friend<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',24);e.render=function(p,t,o,c,e,i){return n(),s("div",null,[u,l,a("more"),k])};export default e;export{c as __pageData};
