import{o as n,c as s,a}from"./app.ffb3eaca.js";const t='{"title":"指令v-model","description":"","frontmatter":{},"headers":[{"level":2,"title":"表单元素绑定","slug":"表单元素绑定"},{"level":3,"title":"编译解析","slug":"编译解析"},{"level":3,"title":"代码生成","slug":"代码生成"},{"level":2,"title":"指令钩子","slug":"指令钩子"},{"level":2,"title":"组件绑定","slug":"组件绑定"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"source/vue/v-model.md","lastUpdated":1621440211864}',p={},o=a('<h1 id="指令v-model"><a class="header-anchor" href="#指令v-model" aria-hidden="true">#</a> 指令v-model</h1><p>在Vue中我们可以用<code>v-model</code>指令来使表单的值和状态进行双向绑定，当表单的值改变时绑定的值也会变化。其实，<code>v-model</code>是Vue提供的<code>props</code>和事件的语法糖，现在我们通过源码分析下这其中的原理。</p><h2 id="表单元素绑定"><a class="header-anchor" href="#表单元素绑定" aria-hidden="true">#</a> 表单元素绑定</h2><p>我们先来看一下<code>v-model</code>的例子:</p><div class="language-js"><pre><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  el<span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;div&gt;\n      &lt;input v-model=&quot;message&quot; /&gt;\n      &lt;p&gt;{{ message }}&lt;/p&gt;\n    &lt;/div&gt;\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  data<span class="token operator">:</span> <span class="token punctuation">{</span>\n    message<span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="编译解析"><a class="header-anchor" href="#编译解析" aria-hidden="true">#</a> 编译解析</h3><p>对于<code>v-model</code>和其他指令一样，在模版的编译解析阶段会走<code>src/compiler/parser/index.js</code>文件的<code>processAttrs</code>方法，这个方法是对ast节点的attrsList属性进行处理。因为这个指令不是<code>v-bind</code>和<code>v-on</code>等特殊指令，所以该方法会走下面逻辑：</p><div class="language-js"><pre><code>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>dirRE<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// parse arg</span>\n<span class="token keyword">const</span> argMatch <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>argRE<span class="token punctuation">)</span>\n<span class="token keyword">let</span> arg <span class="token operator">=</span> argMatch <span class="token operator">&amp;&amp;</span> argMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\nisDynamic <span class="token operator">=</span> <span class="token boolean">false</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dynamicArgRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    arg <span class="token operator">=</span> arg<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n    isDynamic <span class="token operator">=</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">addDirective</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> name<span class="token punctuation">,</span> rawName<span class="token punctuation">,</span> value<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> isDynamic<span class="token punctuation">,</span> modifiers<span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">&amp;&amp;</span> name <span class="token operator">===</span> <span class="token string">&#39;model&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">checkForAliasModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>这个方法就是处理普通指令并调用<code>addDirective</code>方法在ast节点的<code>directives</code>属性上增加指令对象，对于我们的例子，执行完的结果:</p><img src="http://blog.inoob.xyz/posts/a2192891/1.jpg"><p>现在对<code>v-model</code>的编译解析阶段就完成了，接下来是进行编译代码生成阶段。</p><h3 id="代码生成"><a class="header-anchor" href="#代码生成" aria-hidden="true">#</a> 代码生成</h3><p>在编译代码生成阶段，会在<code>src/compiler/codegen/index.js</code>文件对于data代码生成入口函数<code>genData</code>中处理指令代码的相关逻辑，这部分逻辑都在<code>genDirectives</code>函数处理:</p><div class="language-js"><pre><code><span class="token comment">// 生成render代码入口</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">genData</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token operator">:</span> ASTElement<span class="token punctuation">,</span> state<span class="token operator">:</span> CodegenState</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&#39;{&#39;</span>\n\n  <span class="token comment">// directives first.</span>\n  <span class="token comment">// directives may mutate the el&#39;s other properties before they are generated.</span>\n  <span class="token keyword">const</span> dirs <span class="token operator">=</span> <span class="token function">genDirectives</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirs<span class="token punctuation">)</span> data <span class="token operator">+=</span> dirs <span class="token operator">+</span> <span class="token string">&#39;,&#39;</span>\n  \n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>来看下<code>genDirectives</code>函数的定义:</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">genDirectives</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token operator">:</span> ASTElement<span class="token punctuation">,</span> state<span class="token operator">:</span> CodegenState</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> dirs <span class="token operator">=</span> el<span class="token punctuation">.</span>directives\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dirs<span class="token punctuation">)</span> <span class="token keyword">return</span>\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">&#39;directives:[&#39;</span>\n  <span class="token keyword">let</span> hasRuntime <span class="token operator">=</span> <span class="token boolean">false</span>\n  <span class="token keyword">let</span> i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> dir<span class="token punctuation">,</span> needRuntime\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> dirs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    dir <span class="token operator">=</span> dirs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    needRuntime <span class="token operator">=</span> <span class="token boolean">true</span>\n    <span class="token keyword">const</span> gen<span class="token operator">:</span> DirectiveFunction <span class="token operator">=</span> state<span class="token punctuation">.</span>directives<span class="token punctuation">[</span>dir<span class="token punctuation">.</span>name<span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>gen<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// compile-time directive that manipulates AST.</span>\n      <span class="token comment">// returns true if it also needs a runtime counterpart.</span>\n      needRuntime <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token function">gen</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> dir<span class="token punctuation">,</span> state<span class="token punctuation">.</span>warn<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>needRuntime<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      hasRuntime <span class="token operator">=</span> <span class="token boolean">true</span>\n      res <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">{name:&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dir<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;,rawName:&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dir<span class="token punctuation">.</span>rawName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n        dir<span class="token punctuation">.</span>value <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">,value:(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dir<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">),expression:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>dir<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n      <span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n        dir<span class="token punctuation">.</span>arg <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">,arg:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dir<span class="token punctuation">.</span>isDynamicArg <span class="token operator">?</span> dir<span class="token punctuation">.</span>arg <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dir<span class="token punctuation">.</span>arg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n      <span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n        dir<span class="token punctuation">.</span>modifiers <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">,modifiers:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>dir<span class="token punctuation">.</span>modifiers<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n      <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">},</span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasRuntime<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;]&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>这个方法循环遍历ast节点的<code>directives</code>属性的每个指令，对于每个指令会调用<code>state.directives[dir.name]</code>返回的函数。这里的state是指Vue编译相关的一些配置，这些配置和平台有关，它的入口在<code>src/platforms/web/compiler/options.js</code>：</p><div class="language-js"><pre><code><span class="token keyword">import</span> directives <span class="token keyword">from</span> <span class="token string">&#39;./directives/index&#39;</span>\n<span class="token comment">//...</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> baseOptions<span class="token operator">:</span> CompilerOptions <span class="token operator">=</span> <span class="token punctuation">{</span>\n  expectHTML<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  modules<span class="token punctuation">,</span>\n  directives<span class="token punctuation">,</span>\n  isPreTag<span class="token punctuation">,</span>\n  isUnaryTag<span class="token punctuation">,</span>\n  mustUseProp<span class="token punctuation">,</span>\n  canBeLeftOpenTag<span class="token punctuation">,</span>\n  isReservedTag<span class="token punctuation">,</span>\n  getTagNamespace<span class="token punctuation">,</span>\n  staticKeys<span class="token operator">:</span> <span class="token function">genStaticKeys</span><span class="token punctuation">(</span>modules<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>和指令相关配置定义在<code>src/platforms/web/compiler/directives/index.js</code>中：</p><div class="language-js"><pre><code><span class="token keyword">import</span> model <span class="token keyword">from</span> <span class="token string">&#39;./model&#39;</span>\n<span class="token keyword">import</span> text <span class="token keyword">from</span> <span class="token string">&#39;./text&#39;</span>\n<span class="token keyword">import</span> html <span class="token keyword">from</span> <span class="token string">&#39;./html&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  model<span class="token punctuation">,</span>\n  text<span class="token punctuation">,</span>\n  html\n<span class="token punctuation">}</span>\n</code></pre></div><p>很明显Vue对这3个特殊的指令编译都有特殊处理。所以上面的<code>gen</code>函数就是指<code>src/platforms/web/compiler/directives/model.js</code>文件中定义的<code>model</code>方法:</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">model</span> <span class="token punctuation">(</span>\n  <span class="token parameter">el<span class="token operator">:</span> ASTElement<span class="token punctuation">,</span>\n  dir<span class="token operator">:</span> ASTDirective<span class="token punctuation">,</span>\n  _warn<span class="token operator">:</span> Function</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token operator">?</span>boolean <span class="token punctuation">{</span>\n  warn <span class="token operator">=</span> _warn\n  <span class="token keyword">const</span> value <span class="token operator">=</span> dir<span class="token punctuation">.</span>value\n  <span class="token keyword">const</span> modifiers <span class="token operator">=</span> dir<span class="token punctuation">.</span>modifiers\n  <span class="token keyword">const</span> tag <span class="token operator">=</span> el<span class="token punctuation">.</span>tag\n  <span class="token keyword">const</span> type <span class="token operator">=</span> el<span class="token punctuation">.</span>attrsMap<span class="token punctuation">.</span>type\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// inputs with type=&quot;file&quot; are read only and setting the input&#39;s</span>\n    <span class="token comment">// value will throw an error.</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">&#39;input&#39;</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">===</span> <span class="token string">&#39;file&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> v-model=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; type=&quot;file&quot;&gt;:\\n</span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">File inputs are read only. Use a v-on:change listener instead.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        el<span class="token punctuation">.</span>rawAttrsMap<span class="token punctuation">[</span><span class="token string">&#39;v-model&#39;</span><span class="token punctuation">]</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>component<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">genComponentModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span>\n    <span class="token comment">// component v-model doesn&#39;t need extra runtime</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">&#39;select&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">genSelect</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">&#39;input&#39;</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">===</span> <span class="token string">&#39;checkbox&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">genCheckboxModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">&#39;input&#39;</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">===</span> <span class="token string">&#39;radio&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">genRadioModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">&#39;input&#39;</span> <span class="token operator">||</span> tag <span class="token operator">===</span> <span class="token string">&#39;textarea&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">genDefaultModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token function">isReservedTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">genComponentModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span>\n    <span class="token comment">// component v-model doesn&#39;t need extra runtime</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">warn</span><span class="token punctuation">(</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> v-model=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;&gt;: </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">v-model is not supported on this element type. </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n      <span class="token string">&#39;If you are working with contenteditable, it\\&#39;s recommended to &#39;</span> <span class="token operator">+</span>\n      <span class="token string">&#39;wrap a library dedicated for that purpose inside a custom component.&#39;</span><span class="token punctuation">,</span>\n      el<span class="token punctuation">.</span>rawAttrsMap<span class="token punctuation">[</span><span class="token string">&#39;v-model&#39;</span><span class="token punctuation">]</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// ensure runtime directive metadata</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>这个方法主要是处理<code>v-model</code>绑定在不同表单或者组件的处理。在我们例子是绑定在<code>input</code>，所以会调用<code>genDefaultModel</code>方法：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">genDefaultModel</span> <span class="token punctuation">(</span>\n  <span class="token parameter">el<span class="token operator">:</span> ASTElement<span class="token punctuation">,</span>\n  value<span class="token operator">:</span> string<span class="token punctuation">,</span>\n  modifiers<span class="token operator">:</span> <span class="token operator">?</span>ASTModifiers</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token operator">?</span>boolean <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> type <span class="token operator">=</span> el<span class="token punctuation">.</span>attrsMap<span class="token punctuation">.</span>type\n\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> lazy<span class="token punctuation">,</span> number<span class="token punctuation">,</span> trim <span class="token punctuation">}</span> <span class="token operator">=</span> modifiers <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">const</span> needCompositionGuard <span class="token operator">=</span> <span class="token operator">!</span>lazy <span class="token operator">&amp;&amp;</span> type <span class="token operator">!==</span> <span class="token string">&#39;range&#39;</span>\n  <span class="token keyword">const</span> event <span class="token operator">=</span> lazy\n    <span class="token operator">?</span> <span class="token string">&#39;change&#39;</span>\n    <span class="token operator">:</span> type <span class="token operator">===</span> <span class="token string">&#39;range&#39;</span>\n      <span class="token operator">?</span> <span class="token constant">RANGE_TOKEN</span>\n      <span class="token operator">:</span> <span class="token string">&#39;input&#39;</span>\n\n  <span class="token keyword">let</span> valueExpression <span class="token operator">=</span> <span class="token string">&#39;$event.target.value&#39;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>trim<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    valueExpression <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">$event.target.value.trim()</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    valueExpression <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">_n(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>valueExpression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token function">genAssignmentCode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> valueExpression<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>needCompositionGuard<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">if($event.target.composing)return;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">addProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token function">addHandler</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> event<span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>trim <span class="token operator">||</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">addHandler</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;blur&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$forceUpdate()&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>这个方法先获取<code>v-model</code>指令的修饰符，接下来是根据不同修饰符对事件类型<code>event</code>和表达式的值<code>valueExpression</code>的处理。然后调用<code>genAssignmentCode</code>方法生成我们回调函数的<code>code</code>：</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">genAssignmentCode</span> <span class="token punctuation">(</span>\n  <span class="token parameter">value<span class="token operator">:</span> string<span class="token punctuation">,</span>\n  assignment<span class="token operator">:</span> string</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">parseModel</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>assignment<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">$set(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>res<span class="token punctuation">.</span>exp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>res<span class="token punctuation">.</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>assignment<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>这个方法主要是要处理指令表达式是类似<code>test[test1[key]]</code>, <code>test[&quot;a&quot;][key]</code>等情况。我们例子直接返回<code>${value}=${assignment}</code>。因为我们没设置lazy，所以最终我们的code为<code>if($event.target.composing)return;message=$event.target.value</code>。对于composing为真直接返回这段逻辑我们稍后分析。接下来就是<code>v-model</code>指令的关键逻辑：</p><div class="language-js"><pre><code><span class="token function">addProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token function">addHandler</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> event<span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n</code></pre></div><p>它会往ast节点上增加一个<code>props</code>和绑定一个事件event，这就是Vue语法糖实现的核心。执行完这段逻辑看下ast节点结果:</p><img src="http://blog.inoob.xyz/posts/a2192891/2.jpg"><p>执行完平台的model方法后返回<code>true</code>，再回到<code>genDirectives</code>方法，如果<code>needRuntime</code>为<code>true</code>，就把指令相关属性就行字符串代码拼接并最终返回。这里我们看下<code>genData</code>函数有一细节，就是函数最开始就处理指令，这是因为处理指令时候可能会在节点上新增其他一些属性，例如我们<code>v-model</code>指令会增加<code>props</code>和事件。</p><p>最后，来看下<code>render</code>生成的代码结果:</p><div class="language-js"><pre><code><span class="token keyword">with</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n    <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      directives<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;model&#39;</span><span class="token punctuation">,</span> rawName<span class="token operator">:</span> <span class="token string">&#39;v-model&#39;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> message<span class="token punctuation">,</span> expression<span class="token operator">:</span> <span class="token string">&#39;message&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      domProps<span class="token operator">:</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> message <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      on<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function-variable function">input</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>$event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>composing<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n          message <span class="token operator">=</span> $event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">_v</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token function">_s</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="指令钩子"><a class="header-anchor" href="#指令钩子" aria-hidden="true">#</a> 指令钩子</h2><p>在上面分析后，我们的例子其实等价于:</p><div class="language-js"><pre><code><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  el<span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;div&gt;\n      &lt;input :value=&quot;message&quot; @input=&quot;message=$event.target.value&quot;/&gt;\n      &lt;p&gt;{{ message }}&lt;/p&gt;\n    &lt;/div&gt;\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  data<span class="token operator">:</span> <span class="token punctuation">{</span>\n    message<span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>但是这里面有一个细微的差别我们可能没注意，那就是对于中文输入的处理。使用<code>v-model</code>输入中文过程中我们状态message是不会更着变化的，而等价的写法就会，那这中间的处理Vue是怎么实现的呢？</p><p>我们知道Vue的自定义指令存在钩子函数，并且在绑定的元素的插入或者更新阶段触发。其实，Vue也内置了<code>v-model</code>的钩子函数来处理我们上面说的中文输入的场景。现在来看下它的定义。</p><p>在我们虚拟节点的<code>patch</code>过程中会触发一系列的钩子函数，对于指令会在<code>create</code>,<code>update</code>和<code>destory</code>钩子都会有处理，它的入口定义在<code>src/core/vdom/modules/directives.js</code>：</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  create<span class="token operator">:</span> updateDirectives<span class="token punctuation">,</span>\n  update<span class="token operator">:</span> updateDirectives<span class="token punctuation">,</span>\n  <span class="token function-variable function">destroy</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">unbindDirectives</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token operator">:</span> VNodeWithData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">updateDirectives</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> emptyNode<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">updateDirectives</span> <span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token operator">:</span> VNodeWithData<span class="token punctuation">,</span> vnode<span class="token operator">:</span> VNodeWithData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>directives <span class="token operator">||</span> vnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>directives<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">_update</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>很明显，在上面的三个时期都会调用<code>_update</code>函数：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">_update</span> <span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> isCreate <span class="token operator">=</span> oldVnode <span class="token operator">===</span> emptyNode\n  <span class="token keyword">const</span> isDestroy <span class="token operator">=</span> vnode <span class="token operator">===</span> emptyNode\n  <span class="token keyword">const</span> oldDirs <span class="token operator">=</span> <span class="token function">normalizeDirectives</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>directives<span class="token punctuation">,</span> oldVnode<span class="token punctuation">.</span>context<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> newDirs <span class="token operator">=</span> <span class="token function">normalizeDirectives</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>directives<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>context<span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> dirsWithInsert <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> dirsWithPostpatch <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">let</span> key<span class="token punctuation">,</span> oldDir<span class="token punctuation">,</span> dir\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> newDirs<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    oldDir <span class="token operator">=</span> oldDirs<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n    dir <span class="token operator">=</span> newDirs<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// new directive, bind</span>\n      <span class="token function">callHook</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">&#39;bind&#39;</span><span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> oldVnode<span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>def <span class="token operator">&amp;&amp;</span> dir<span class="token punctuation">.</span>def<span class="token punctuation">.</span>inserted<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        dirsWithInsert<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// existing directive, update</span>\n      dir<span class="token punctuation">.</span>oldValue <span class="token operator">=</span> oldDir<span class="token punctuation">.</span>value\n      dir<span class="token punctuation">.</span>oldArg <span class="token operator">=</span> oldDir<span class="token punctuation">.</span>arg\n      <span class="token function">callHook</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">&#39;update&#39;</span><span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> oldVnode<span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>def <span class="token operator">&amp;&amp;</span> dir<span class="token punctuation">.</span>def<span class="token punctuation">.</span>componentUpdated<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        dirsWithPostpatch<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirsWithInsert<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">callInsert</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dirsWithInsert<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">callHook</span><span class="token punctuation">(</span>dirsWithInsert<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;inserted&#39;</span><span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> oldVnode<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>isCreate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">mergeVNodeHook</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> <span class="token string">&#39;insert&#39;</span><span class="token punctuation">,</span> callInsert<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">callInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirsWithPostpatch<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">mergeVNodeHook</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> <span class="token string">&#39;postpatch&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dirsWithPostpatch<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">callHook</span><span class="token punctuation">(</span>dirsWithPostpatch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;componentUpdated&#39;</span><span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> oldVnode<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isCreate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> oldDirs<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newDirs<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// no longer present, unbind</span>\n        <span class="token function">callHook</span><span class="token punctuation">(</span>oldDirs<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;unbind&#39;</span><span class="token punctuation">,</span> oldVnode<span class="token punctuation">,</span> oldVnode<span class="token punctuation">,</span> isDestroy<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>这个方法用<code>isCreate</code>表示当前vnode是否是新建的节点，<code>isDestroy</code>表示当前节点是否销毁。<code>normalizeDirectives</code>方法是获取格式化指令对象，把指令的钩子函数进行整合到<code>def</code>。接着循环新节点的指令数组<code>newDirs</code>，对于每个指令对象<code>dir</code>在老的指令对象<code>oldDirs</code>不存在，这会调用指令的<code>bind</code>钩子，如果有定义<code>insert</code>钩子，则push到<code>dirsWithInsert</code>队列中，这样能保证所有的指令执行完<code>bind</code>钩子才去执行<code>insert</code>钩子。</p><p>如果老的指令对象<code>oldDir</code>存在，则调用指令的<code>update</code>钩子，并把<code>componentUpdated</code>钩子存到<code>dirsWithPostpatch</code>中，这样能保证所有的指令执行完<code>update</code>钩子才去执行<code>componentUpdated</code>钩子。最后把执行指令<code>insert</code>钩子数组函数合并到虚拟节点的自身的<code>insert</code>钩子，把执行指令<code>componentUpdated</code>钩子数组函数合并到虚拟节点的自身的<code>postpatch</code>钩子，这样就会更新虚拟节点在<code>patch</code>过程的对应阶段执行。</p><p>如果不是新建的节点，并且老的指令数组<code>oldDirs</code>如果有<code>newDirs</code>中不存在的，则证明该指令已经废弃，会调用响应的<code>unbind</code>钩子函数。</p><p>回到我们上面的问题，看看<code>v-model</code>内置的<code>insert</code>钩子的实现，它定义在<code>src/platforms/web/runtime/directives/model.js</code>中：</p><div class="language-js"><pre><code><span class="token keyword">const</span> directive <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">inserted</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> oldVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;select&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// #6903</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>elm <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>_vOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">mergeVNodeHook</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> <span class="token string">&#39;postpatch&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          directive<span class="token punctuation">.</span><span class="token function">componentUpdated</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token function">setSelected</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>context<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      el<span class="token punctuation">.</span>_vOptions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>options<span class="token punctuation">,</span> getValue<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;textarea&#39;</span> <span class="token operator">||</span> <span class="token function">isTextInputType</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      el<span class="token punctuation">.</span>_vModifiers <span class="token operator">=</span> binding<span class="token punctuation">.</span>modifiers\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>binding<span class="token punctuation">.</span>modifiers<span class="token punctuation">.</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;compositionstart&#39;</span><span class="token punctuation">,</span> onCompositionStart<span class="token punctuation">)</span>\n        el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;compositionend&#39;</span><span class="token punctuation">,</span> onCompositionEnd<span class="token punctuation">)</span>\n        el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> onCompositionEnd<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>isIE9<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          el<span class="token punctuation">.</span>vmodel <span class="token operator">=</span> <span class="token boolean">true</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>上面代码在处理绑定<code>input</code>和<code>textarea</code>类型的绑定时，在元素插入DOM后会另外绑定<code>compositionstart</code>和<code>compositionend</code>事件，它们分别会在中文输入过程和输入完成触发。来看下对应的回调函数:</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">onCompositionStart</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>composing <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">onCompositionEnd</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// prevent triggering an input event for no reason</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>composing<span class="token punctuation">)</span> <span class="token keyword">return</span>\n  e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>composing <span class="token operator">=</span> <span class="token boolean">false</span>\n  <span class="token function">trigger</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">,</span> <span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">trigger</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> e <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createEvent</span><span class="token punctuation">(</span><span class="token string">&#39;HTMLEvents&#39;</span><span class="token punctuation">)</span>\n  e<span class="token punctuation">.</span><span class="token function">initEvent</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n  el<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>在中文输入过程中，设置<code>e.target.composing</code>为<code>true</code>，这个时候我们再来看下<code>v-model</code>绑定事件的函数体：</p><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>$event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>composing<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\nmessage <span class="token operator">=</span> $event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n</code></pre></div><p>当中文输入过程中触发的<code>input</code>事件，<code>$event.target.composing</code>为<code>true</code>直接返回，这样状态就会不更着改变了。当中文输入完成执行<code>onCompositionEnd</code>函数会把<code>e.target.composing</code>设置为<code>false</code>，这个时候执行函数体就会修改状态message了。</p><h2 id="组件绑定"><a class="header-anchor" href="#组件绑定" aria-hidden="true">#</a> 组件绑定</h2><p><code>v-model</code>也可以用到组件上，先看一个例子：</p><div class="language-js"><pre><code><span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token punctuation">{</span>\n  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;\n    &lt;input :value=&quot;value&quot; @input=&quot;handleInput&quot;&gt;\n  &lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">handleInput</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  el<span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;div&gt;\n      &lt;Child v-model=&quot;message&quot;&gt;&lt;/Child&gt;\n      &lt;p&gt;{{ message }}&lt;/p&gt;\n    &lt;/div&gt;\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  data<span class="token operator">:</span> <span class="token punctuation">{</span>\n    message<span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  components<span class="token operator">:</span> <span class="token punctuation">{</span> Child <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>在组件上使用<code>v-model</code>也会在编译模版时进行处理，不同的是在<code>gen</code>函数中会走下面的逻辑:</p><div class="language-js"><pre><code><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token function">isReservedTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">genComponentModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span>\n  <span class="token comment">// component v-model doesn&#39;t need extra runtime</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>因为组件不是平台保留的标签，调用<code>genComponentModel</code>方法进行处理并且返回<code>false</code>：</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">genComponentModel</span> <span class="token punctuation">(</span>\n  <span class="token parameter">el<span class="token operator">:</span> ASTElement<span class="token punctuation">,</span>\n  value<span class="token operator">:</span> string<span class="token punctuation">,</span>\n  modifiers<span class="token operator">:</span> <span class="token operator">?</span>ASTModifiers</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token operator">?</span>boolean <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> number<span class="token punctuation">,</span> trim <span class="token punctuation">}</span> <span class="token operator">=</span> modifiers <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> baseValueExpression <span class="token operator">=</span> <span class="token string">&#39;$$v&#39;</span>\n  <span class="token keyword">let</span> valueExpression <span class="token operator">=</span> baseValueExpression\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>trim<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    valueExpression <span class="token operator">=</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(typeof </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>baseValueExpression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> === &#39;string&#39;</span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">? </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>baseValueExpression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.trim()</span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>baseValueExpression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    valueExpression <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">_n(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>valueExpression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> assignment <span class="token operator">=</span> <span class="token function">genAssignmentCode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> valueExpression<span class="token punctuation">)</span>\n\n  el<span class="token punctuation">.</span>model <span class="token operator">=</span> <span class="token punctuation">{</span>\n    value<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    expression<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    callback<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">function (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>baseValueExpression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) {</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>assignment<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>这个方法主要在ast节点上添加<code>model</code>属性来表示指令相关数据，我们例子中执行完的结果为：</p><img src="http://blog.inoob.xyz/posts/a2192891/4.jpg"><p>然后返回<code>genData</code>函数，这里返回的dirs为<code>undefined</code>，因为组件使用<code>v-model</code>单纯是个语法糖，不需要在运行时进行相关处理。另外，这个函数要把节点上的<code>model</code>赋值给<code>data</code>属性：</p><div class="language-js"><pre><code><span class="token comment">// component v-model</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>model<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  data <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">model:{value:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n    el<span class="token punctuation">.</span>model<span class="token punctuation">.</span>value\n  <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,callback:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n    el<span class="token punctuation">.</span>model<span class="token punctuation">.</span>callback\n  <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,expression:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n    el<span class="token punctuation">.</span>model<span class="token punctuation">.</span>expression\n  <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">},</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>最后我们看下生成的<code>render</code>代码：</p><div class="language-js"><pre><code><span class="token keyword">with</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">_c</span><span class="token punctuation">(</span>\n    <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>\n      <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;Child&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        model<span class="token operator">:</span> <span class="token punctuation">{</span>\n          value<span class="token operator">:</span> message<span class="token punctuation">,</span>\n          <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            message <span class="token operator">=</span> $$v<span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          expression<span class="token operator">:</span> <span class="token string">&#39;message&#39;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">_v</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token function">_s</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token number">1</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>很明显，在<code>Child</code>的<code>data</code>增加了<code>model</code>属性，并且会在创建组件构造器时进行处理。在<code>src/core/vdom/create-component.js</code>文件的<code>createComponent</code>函数有下面一段逻辑:</p><div class="language-js"><pre><code><span class="token comment">// v-model的处理</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>model<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">transformModel</span><span class="token punctuation">(</span>Ctor<span class="token punctuation">.</span>options<span class="token punctuation">,</span> data<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><p>来看下<code>transformModel</code>的定义：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">transformModel</span> <span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> data<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> prop <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>model <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>model<span class="token punctuation">.</span>prop<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;value&#39;</span>\n  <span class="token keyword">const</span> event <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>model <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>model<span class="token punctuation">.</span>event<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;input&#39;</span>\n  <span class="token punctuation">;</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>attrs <span class="token operator">||</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>attrs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">.</span>model<span class="token punctuation">.</span>value\n  <span class="token keyword">const</span> on <span class="token operator">=</span> data<span class="token punctuation">.</span>on <span class="token operator">||</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>on <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> existing <span class="token operator">=</span> on<span class="token punctuation">[</span>event<span class="token punctuation">]</span>\n  <span class="token keyword">const</span> callback <span class="token operator">=</span> data<span class="token punctuation">.</span>model<span class="token punctuation">.</span>callback\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>existing<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>\n      Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>existing<span class="token punctuation">)</span>\n        <span class="token operator">?</span> existing<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span>\n        <span class="token operator">:</span> existing <span class="token operator">!==</span> callback\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      on<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>existing<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    on<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> callback\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>这个方法向组件虚拟节点<code>data</code>属性增加一个key为<code>prop</code>的属性，并且在<code>on</code>增加事件<code>event</code>，这样就实现了<code>v-model</code>的功能。</p><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>那么至此，<code>v-model</code>的实现就分析完了，我们了解到它是 Vue 双向绑定的真正实现，但本质上就是一种语法糖，它即可以支持原生表单元素，也可以支持自定义组件。在组件的实现中，我们是可以配置子组件接收<code>prop</code>名称，以及派发的事件名称。</p>',72);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
