import{o as n,c as s,b as a,d as t,e as p,a as o}from"./app.27eb1626.js";const e='{"title":"模版字符串","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本用法","slug":"基本用法"},{"level":2,"title":"字符串占位符","slug":"字符串占位符"},{"level":2,"title":"标签模版","slug":"标签模版"},{"level":2,"title":"应用","slug":"应用"},{"level":2,"title":"参考","slug":"参考"}],"relativePath":"summary/es6/pattern-string.md","lastUpdated":1624464482541}',c={},l=t("h1",{id:"模版字符串"},[t("a",{class:"header-anchor",href:"#模版字符串","aria-hidden":"true"},"#"),p(" 模版字符串")],-1),u=t("p",null,"模版字符串是es6引入的字符串操作规范，目的在于我们可以更加快速的书写多行字符串，基本的字符格式化和HTML转移等。",-1),i=o('<h2 id="基本用法"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h2><p>用反撇号代 <code>`</code> 替单引号或者双引号：</p><div class="language-js"><pre><code><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">string template</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>多行字符串。在之前多行书写的时候我们会在每行末尾加上<code>\\</code>拼接字符串，或者要显示换行的时候加上换行符号 <code>\\n</code>：</p><div class="language-js"><pre><code><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token string">&#39;Hello \\n\\\nword&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/*\nHello\nworld\n*/</span>\n</code></pre></div><p>在模版字符串中我们直接换行写就可以了，在反撇号中间的换行符和空白字符都会被保留：</p><div class="language-js"><pre><code><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello\n  world</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">/*\nHello\n  world\n*/</span>\n</code></pre></div><h2 id="字符串占位符"><a class="header-anchor" href="#字符串占位符" aria-hidden="true">#</a> 字符串占位符</h2><p>模版字符串用<code>${js表达式}</code> 的方式提供字符串占位，大括号中间允许任意js表达式：</p><div class="language-js"><pre><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;wozien&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token comment">// Hello, I am wozien</span>\n</code></pre></div><p>因为模版字符串也属于js表达式，所以占位符里面允许嵌套模版字符串：</p><div class="language-js"><pre><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n&lt;ul&gt;\n  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">val</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;li&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n&lt;/ul&gt;  \n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">/*\n&lt;ul&gt;\n  &lt;li&gt;1&lt;li&gt;&lt;li&gt;2&lt;li&gt;&lt;li&gt;3&lt;li&gt;\n&lt;/ul&gt;\n*/</span>\n</code></pre></div><p>上面的代码在一个模版字符串的占位符用 <code>map</code> 返回一个 <code>li</code> 字符串数组，最后 <code>join</code> 是因为模版字符串会转化不是字符串类型的数据，比如<code>[1,2,3]</code> 显示为 <code>1,2,3</code>。</p><h2 id="标签模版"><a class="header-anchor" href="#标签模版" aria-hidden="true">#</a> 标签模版</h2><p>模版字符串可以在字符串前带上一个函数名作为标签，表示对后面紧跟的字符串进行处理，返回处理后结果。</p><div class="language-js"><pre><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;wozien&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> msg <span class="token operator">=</span> tagFun<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, my age is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">tagFun</span><span class="token punctuation">(</span><span class="token parameter">literals<span class="token punctuation">,</span> <span class="token operator">...</span>exps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>literals<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [ &#39;Hello, I am &#39;, &#39;, my age is &#39;, &#39;&#39; ]</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exps<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// [ &#39;wozien&#39;, 23 ]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>可见，标签函数的第一个参数是占位符分割原字符串的数组结果，第二个参数是占位符的返回值结果数组。于是我们可以利用这两个数组进行拼接，模拟字符串模版的功能：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">tagFun</span><span class="token punctuation">(</span><span class="token parameter">literals<span class="token punctuation">,</span> <span class="token operator">...</span>exps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> literals<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> value <span class="token operator">=</span> exps<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> pre <span class="token operator">+</span> value <span class="token operator">+</span> cur<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Hello, I am wozien, my age is 23</span>\n</code></pre></div><h2 id="应用"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h2><p>处理数组转换。在前面 <code>map</code> 生成的li数组中我们最后 <code>join</code> 了下，其实可以放在标签函数里面处理：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">htmlTag</span><span class="token punctuation">(</span><span class="token parameter">liters<span class="token punctuation">,</span> <span class="token operator">...</span>exps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> liters<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> value <span class="token operator">=</span> exps<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> pre <span class="token operator">+</span> value <span class="token operator">+</span> cur<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> html <span class="token operator">=</span> htmlTag<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n&lt;ul&gt;\n  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">val</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;li&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n&lt;/ul&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>有时候我们为了书写好看把字符串换行写，但实际是输出显示一行，我们可以写一个oneLine标签函数:</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">oneLine</span><span class="token punctuation">(</span><span class="token parameter">liters<span class="token punctuation">,</span> <span class="token operator">...</span>exps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> liters<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> value <span class="token operator">=</span> exps<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> pre <span class="token operator">+</span> value <span class="token operator">+</span> cur<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 正则替换掉每行前面的空字符</span>\n  result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\n\\s)*</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> fruits <span class="token operator">=</span> oneLine<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  apple,\n  peal,\n  banane\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// apple, peal, banane</span>\n</code></pre></div><p>在我们开发中，我们可以把标签函数封装起来，根据配置做不同的字符串处理。类似的工具包有<a href="https://github.com/declandewet/common-tags" target="_blank" rel="noopener noreferrer">common-tags</a>。</p><h2 id="参考"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><p><a href="https://github.com/mqyqingfeng/Blog/issues/84" target="_blank" rel="noopener noreferrer">ES6 系列之模板字符串</a></p>',26);c.render=function(t,p,o,e,c,k){return n(),s("div",null,[l,u,a("more"),i])};export default c;export{e as __pageData};
