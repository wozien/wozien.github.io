import{o as n,c as s,a}from"./app.ffb3eaca.js";const p='{"title":"函数执行上下文","description":"","frontmatter":{},"headers":[{"level":2,"title":"一个例子","slug":"一个例子"},{"level":2,"title":"变量对象","slug":"变量对象"},{"level":2,"title":"变量提升","slug":"变量提升"},{"level":2,"title":"思考题","slug":"思考题"},{"level":2,"title":"参考","slug":"参考"}],"relativePath":"summary/js-base/function-context.md","lastUpdated":1621440211864}',t={},o=a('<h1 id="函数执行上下文"><a class="header-anchor" href="#函数执行上下文" aria-hidden="true">#</a> 函数执行上下文</h1><p>执行上下文(也称执行环境)是JS一个重要的概念，它定义了变量或者函数有权访问的其他数据。其中变量对象是上下文中一个重要的概念，它就好比存储了改上下文变量和函数的容器。</p><h2 id="一个例子"><a class="header-anchor" href="#一个例子" aria-hidden="true">#</a> 一个例子</h2><p>JS的代码并不是一行一行执行的，而是一段一段的解析执行的。这里的一段就是指执行上下文。</p><div class="language-js"><pre><code>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n\n<span class="token keyword">var</span> a<span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>在JS中分成两种执行环境，分别为全局环境和函数环境。全局环境在浏览器就是脚本的最外层。</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token comment">//  全局上下文</span>\n  \n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    \n<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 函数上下文 </span>\n<span class="token punctuation">}</span>  \n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>JS代码的执行上下文的执行顺序用一个栈来维护，叫做执行上下文栈。脚本一开始执行就把全局上下压进栈里，当执行一个函数时，就会创建一个函数上下文进栈。当函数执行完时就会出栈。全局环境永远在栈底，直到程序退出后才出栈。</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>上面代码的执行上下文栈的变化如下：</p><div class="language-js"><pre><code>ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>globalContext<span class="token punctuation">)</span>\nECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>\nECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span>\nECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="变量对象"><a class="header-anchor" href="#变量对象" aria-hidden="true">#</a> 变量对象</h2><p>每个执行环境都有一个存储变量和函数的对象，称为变量对象(VO)。全局环境的这个对象我们一般认为是<code>window</code>, 所以我们在全局环境声明的变量或函数都会成为<code>window</code>对象的属性：</p><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo <span class="token operator">===</span> window<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><p>每个函数的执行环境也有一个变量对象，可以存储函数参数，变量和函数，但是变量对象我们无法访问。只有当函数被执行的时候，变量对象会用<code>arguments</code>初始化并激活，这是可以称为活动对象(AO), 并且可以访问定义的变量。因此变量对象和活动对象其实是一个东西。</p><p>函数的执行分为两个阶段：</p><ul><li><p>进入阶段：</p></li><li><p>函数参数会作为活动对象的属性，值为参数的传值，没有则为<code>undefined</code></p></li><li><p>声明的函数会作为对象的属性，值为函数的引用。函数声明会存在同名覆盖</p></li><li><p>声明的变量会作为对象的属性，值为<code>undefined</code>。不会影响到同名变量的形参</p></li><li><p>执行阶段: 变量的值求赋值AO相应的属性</p></li></ul><p>如下面的例子：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>在进入阶段对象的AO为：</p><div class="language-js"><pre><code><span class="token constant">AO</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    arguments<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token number">0</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n        length<span class="token operator">:</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    b<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n    c<span class="token operator">:</span> reference to <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    d<span class="token operator">:</span> <span class="token keyword">undefined</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>在执行阶段b和d会被赋值：</p><div class="language-js"><pre><code><span class="token constant">AO</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    arguments<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token number">0</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n        length<span class="token operator">:</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    b<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    c<span class="token operator">:</span> reference to <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    d<span class="token operator">:</span> reference to FunctionExpression <span class="token string">&quot;d&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="变量提升"><a class="header-anchor" href="#变量提升" aria-hidden="true">#</a> 变量提升</h2><p>知道了JS的执行上下文从创建到执行的变化就不难解析变量提升的机制了，比如上面的例子中：</p><div class="language-js"><pre><code>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> a<span class="token punctuation">;</span>\n</code></pre></div><p>当执行这段代码的进入阶段，变量对象会激活为活动对象，处理变量和函数的声明：</p><div class="language-js"><pre><code><span class="token constant">AO</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n  foo<span class="token operator">:</span> reference to <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n<span class="token punctuation">}</span>\n</code></pre></div><p>到了执行阶段，当遇到a=2时，会为活动对象的属性赋值。这时候a已经定义在对象上，所以不会报未声明的错误。最后活动对象就变成了：</p><div class="language-js"><pre><code><span class="token constant">AO</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  foo<span class="token operator">:</span> reference to <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n<span class="token punctuation">}</span>\n</code></pre></div><p>上面的代码看起来像变量的声明被提升到执行环境的最顶部，但是这仅限于用<code>var</code>声明的变量。比如es6中的 <code>let</code> 和 <code>const</code> 就不存在这种机制。</p><h2 id="思考题"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>下面的代码的执行过程有啥区别：</p><div class="language-js"><pre><code><span class="token comment">// 1</span>\n<span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">&quot;global scope&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">&quot;local scope&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> scope<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 2</span>\n\n<span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">&quot;global scope&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">&quot;local scope&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> scope<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> f<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>上面两段代码执行结果一样，但是执行过程的上下文栈变化不一样。第一段的栈变化如下：</p><div class="language-js"><pre><code>ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>checkscope<span class="token punctuation">)</span>\nECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>\nECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p>而第二段的变化如下：</p><div class="language-js"><pre><code>ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>checkscope<span class="token punctuation">)</span>\nECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>\nECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="参考"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><p><a href="https://github.com/mqyqingfeng/Blog/issues/4" target="_blank" rel="noopener noreferrer">JavaScript深入之执行上下文栈</a></p>',40);t.render=function(a,p,t,c,e,u){return n(),s("div",null,[o])};export default t;export{p as __pageData};
