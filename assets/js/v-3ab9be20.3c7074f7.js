"use strict";(self.webpackChunkfe_note=self.webpackChunkfe_note||[]).push([[2066],{876:(s,a,n)=>{n.r(a),n.d(a,{data:()=>t});const t={key:"v-3ab9be20",path:"/summary/browser/security.html",title:"浏览器安全",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"同源策略",slug:"同源策略",children:[]},{level:2,title:"XSS攻击",slug:"xss攻击",children:[{level:3,title:"存储型XSS",slug:"存储型xss",children:[]},{level:3,title:"反射型 XSS 攻击",slug:"反射型-xss-攻击",children:[]},{level:3,title:"基于 DOM 的 XSS 攻击",slug:"基于-dom-的-xss-攻击",children:[]},{level:3,title:"如何阻止XSS攻击",slug:"如何阻止xss攻击",children:[]}]},{level:2,title:"CSRF",slug:"csrf",children:[{level:3,title:"攻击方式",slug:"攻击方式",children:[]},{level:3,title:"如何预防CSRF攻击",slug:"如何预防csrf攻击",children:[]}]},{level:2,title:"HTTPS",slug:"https",children:[{level:3,title:"加密方式",slug:"加密方式",children:[]},{level:3,title:"数字证书",slug:"数字证书",children:[]}]}],filePathRelative:"summary/browser/security.md",git:{updatedTime:1639904812e3}}},1225:(s,a,n)=>{n.r(a),n.d(a,{default:()=>e});const t=(0,n(6252).uE)('<h1 id="浏览器安全" tabindex="-1"><a class="header-anchor" href="#浏览器安全" aria-hidden="true">#</a> 浏览器安全</h1><h2 id="同源策略" tabindex="-1"><a class="header-anchor" href="#同源策略" aria-hidden="true">#</a> 同源策略</h2><p>如果两个URL的协议，域名和端口都相同，称这两个URL为同源。不同源的资源之间有一套安全策略进行限制，我们成为同源策略。主要表现以下三个方面：</p><ul><li>DOM层面-不同源的JS脚本不能对当前DOM对象进行读写操作</li><li>数据层面-不同源页面无法共享cookie，indexDB和localStorage数据</li><li>网路层面-XHR默认无法跨域请求</li></ul><p>为了平衡web应用的安全性和便利性，针对上面的3中同源策略都有对应放宽机制：</p><ul><li>通过CSP来限制加载第三方资源的自由度</li><li>使用html5的postMessage来进行跨页面数据共享</li><li>利用CORS解决跨域问题</li></ul><h2 id="xss攻击" tabindex="-1"><a class="header-anchor" href="#xss攻击" aria-hidden="true">#</a> XSS攻击</h2><p>XSS 全称是 Cross Site Scripting，为了与“CSS”区分开来，故简称 XSS，翻译过来就是“跨站脚本”。XSS 攻击是指黑客往 HTML 文件中或者 DOM 中注入恶意脚本，从而在用户浏览页面时利用注入的恶意脚本对用户实施攻击的一种手段。</p><h3 id="存储型xss" tabindex="-1"><a class="header-anchor" href="#存储型xss" aria-hidden="true">#</a> 存储型XSS</h3><p><img src="https://wozien-cloud-oss.oss-cn-shenzhen.aliyuncs.com/images/blog/2ed3d8b93035df3c2bcfcc223dc47914.webp" alt=""></p><p>存储型XSS攻击的大致步骤如下：</p><ul><li>首先黑客利用站点漏洞将一段恶意 JavaScript 代码提交到网站的数据库中</li><li>然后用户向网站请求包含了恶意 JavaScript 脚本的页面</li><li>当用户浏览该页面的时候，恶意脚本就会将用户的 Cookie 信息等数据上传到服务器</li></ul><h3 id="反射型-xss-攻击" tabindex="-1"><a class="header-anchor" href="#反射型-xss-攻击" aria-hidden="true">#</a> 反射型 XSS 攻击</h3><p>在一个反射型 XSS 攻击过程中，恶意 JavaScript 脚本属于用户发送给网站请求中的一部分，随后网站又把恶意 JavaScript 脚本返回给用户。当恶意 JavaScript 脚本在用户页面中被执行时，黑客就可以利用该脚本做一些恶意操作。</p><p>如下漏洞代码：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">/* GET home page. */</span>\nrouter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;Express&#39;</span><span class="token punctuation">,</span>xss<span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>xss <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span>\n\n<span class="token comment">// index.ejs</span>\n<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%=</span> title <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">&#39;stylesheet&#39;</span> href<span class="token operator">=</span><span class="token string">&#39;/stylesheets/style.css&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%=</span> title <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Welcome to <span class="token operator">&lt;</span><span class="token operator">%=</span> title <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> xss <span class="token operator">%</span><span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>但当打开http://localhost:3000/?xss=这段 URL 时，其结果如下图所示：</p><p><img src="https://wozien-cloud-oss.oss-cn-shenzhen.aliyuncs.com/images/blog/4dff7d83fe2eecc6cb52c126b4f650fa.webp" alt=""></p><p>通过这个操作，我们会发现用户将一段含有恶意代码的请求提交给 Web 服务器，Web 服务器接收到请求时，又将恶意代码反射给了浏览器端，这就是反射型 XSS 攻击。</p><p>另外需要注意的是，Web 服务器不会存储反射型 XSS 攻击的恶意脚本，这是和存储型 XSS 攻击不同的地方。</p><h3 id="基于-dom-的-xss-攻击" tabindex="-1"><a class="header-anchor" href="#基于-dom-的-xss-攻击" aria-hidden="true">#</a> 基于 DOM 的 XSS 攻击</h3><p>基于 DOM 的 XSS 攻击是不牵涉到页面 Web 服务器的。具体来讲，黑客通过各种手段将恶意脚本注入用户的页面中，比如通过网络劫持在页面传输过程中修改 HTML 页面的内容，这种劫持类型很多，有通过 WiFi 路由器劫持的，有通过本地恶意软件来劫持的，它们的共同点是在 Web 资源传输过程或者在用户使用页面的过程中修改 Web 页面的数据。</p><h3 id="如何阻止xss攻击" tabindex="-1"><a class="header-anchor" href="#如何阻止xss攻击" aria-hidden="true">#</a> 如何阻止XSS攻击</h3><ol><li>服务器对输入脚本进行过滤或转码</li><li>充分利用 CSP，限制加载其他域下的资源文件</li><li>使用 <code>HttpOnly</code>属性</li></ol><h2 id="csrf" tabindex="-1"><a class="header-anchor" href="#csrf" aria-hidden="true">#</a> CSRF</h2><p>CSRF 英文全称是 Cross-site request forgery，所以又称为“跨站请求伪造”，是指黑客引诱用户打开黑客的网站，在黑客的网站中，利用用户的登录状态发起的跨站请求。简单来讲，CSRF 攻击就是黑客利用了用户的登录状态，并通过第三方的站点来做一些坏事。</p><h3 id="攻击方式" tabindex="-1"><a class="header-anchor" href="#攻击方式" aria-hidden="true">#</a> 攻击方式</h3><p>通常当用户打开了黑客的页面后，黑客有三种方式去实施 CSRF 攻击。</p><ol><li><p>自动发起 Get 请求</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>\n<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>黑客的站点：CSRF攻击演示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://time.geekbang.org/sendcoin?user=hacker&amp;number=100<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>2.自动发起 POST 请求</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>\n<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>黑客的站点：CSRF攻击演示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>hacker-form<span class="token punctuation">&#39;</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://time.geekbang.org/sendcoin<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>POST</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hacker<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>number<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;hacker-form&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>3.引诱用户点击链接</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>150</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>http://images.xuejuzi.cn/1612/1_161230185104_1.jpg</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>img</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://time.geekbang.org/sendcoin?user=hacker&amp;number=100<span class="token punctuation">&quot;</span></span> <span class="token attr-name">taget</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_blank<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    点击下载美女照片\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ol><p>和 XSS 不同的是，CSRF 攻击不需要将恶意代码注入用户的页面，仅仅是利用服务器的漏洞和用户的登录状态来实施攻击。</p><h3 id="如何预防csrf攻击" tabindex="-1"><a class="header-anchor" href="#如何预防csrf攻击" aria-hidden="true">#</a> 如何预防CSRF攻击</h3><p>发起 CSRF 攻击的三个必要条件：</p><ul><li>第一个，目标站点一定要有 CSRF 漏洞；</li><li>第二个，用户要登录过目标站点，并且在浏览器上保持有该站点的登录状态；</li><li>第三个，需要用户打开一个第三方站点，可以是黑客的站点，也可以是一些论坛。</li></ul><p>预防攻击的方式：</p><ul><li>充分利用好 Cookie 的 SameSite 属性</li><li>验证请求的来源站点， 利用HTTP 请求头中的 Referer 和 Origin 属性</li><li>CSRF Token。由服务端生成，客户端请求时携带。</li></ul><h2 id="https" tabindex="-1"><a class="header-anchor" href="#https" aria-hidden="true">#</a> HTTPS</h2><p>从 HTTP 协议栈层面来看，我们可以在 TCP 和 HTTP 之间插入一个安全层，所有经过安全层的数据都会被加密或者解密，你可以参考下图：</p><p><img src="https://wozien-cloud-oss.oss-cn-shenzhen.aliyuncs.com/images/blog/9e99f797de30a15a11b0e4b4c8f810cf.webp" alt=""></p><p>从图中我们可以看出 HTTPS 并非是一个新的协议，通常 HTTP 直接和 TCP 通信，HTTPS 则先和安全层通信，然后安全层再和 TCP 层通信。总的来说，安全层有两个主要的职责：对发起 HTTP 请求的数据进行加密操作和对接收到 HTTP 的内容进行解密操作。</p><h3 id="加密方式" tabindex="-1"><a class="header-anchor" href="#加密方式" aria-hidden="true">#</a> 加密方式</h3><p>HTTPS采用的是混合加密方式。那就是在传输数据阶段依然使用对称加密，但是对称加密的密钥我们采用非对称加密来传输。</p><p><img src="https://wozien-cloud-oss.oss-cn-shenzhen.aliyuncs.com/images/blog/d5cd34dbf3636ebc0e809aa424c53845.webp" alt=""></p><h3 id="数字证书" tabindex="-1"><a class="header-anchor" href="#数字证书" aria-hidden="true">#</a> 数字证书</h3><p>数字证书是指权威机构CA（Certificate Authority）给服务器证明身份的一种方式，它可以有效的防止DNS劫持，伪造服务器身份。包含数字证书的请求流程如下：</p><p><img src="https://wozien-cloud-oss.oss-cn-shenzhen.aliyuncs.com/images/blog/77c852ff2202b2b7bb3299a96a0f4aaf.webp" alt=""></p><p>比起没有证书的流程，主要有两点变化：</p><ul><li>服务器没有直接返回公钥给浏览器，而是返回了数字证书，而公钥正是包含在数字证书中的；</li><li>在浏览器端多了一个证书验证的操作，验证了证书之后，才继续后续流程。</li></ul><p>数字证书的申请</p><ul><li>服务器准备一套私钥和公钥，私钥留着自己使用；</li><li>向 CA 机构提交公钥、公司、站点等信息并等待认证</li><li>CA使用hash函数对服务信息进行加密得出信息摘要，并用自己的私钥进行加密生成证书签名</li></ul><p>浏览器验证证书</p><ul><li>浏览器对证书的服务器信息铭文进行hash计算，得出信息摘要A</li><li>再利用对应的CA公钥对签名进行证书解密，得到信息摘要B</li><li>对比A和B，如果一致，证明服务器已经得到对应CA机构的证明</li></ul><blockquote><p>上面的步骤只是证明对应的CA机构，如果该机构是比较小众的话， 还需要通过该CA的证书往上级找到它的父CA，直到找到根CA(一般会预置在OS中)，这样就形成了一个证书链的验证</p></blockquote>',52),p={},e=(0,n(3744).Z)(p,[["render",function(s,a){return t}]])},3744:(s,a)=>{a.Z=(s,a)=>{for(const[n,t]of a)s[n]=t;return s}}}]);