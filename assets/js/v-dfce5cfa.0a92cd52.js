"use strict";(self.webpackChunkfe_note=self.webpackChunkfe_note||[]).push([[4313],{6906:(e,d,c)=>{c.r(d),c.d(d,{data:()=>o});const o={key:"v-dfce5cfa",path:"/summary/tools/docker.html",title:"Docker",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"基本概念",slug:"基本概念",children:[{level:3,title:"三要素",slug:"三要素",children:[]},{level:3,title:"数据卷(volume)",slug:"数据卷-volume",children:[]}]},{level:2,title:"常用命令",slug:"常用命令",children:[{level:3,title:"帮助命令",slug:"帮助命令",children:[]},{level:3,title:"镜像命令",slug:"镜像命令",children:[]},{level:3,title:"容器命令",slug:"容器命令",children:[]}]},{level:2,title:"Dockerfile",slug:"dockerfile",children:[]},{level:2,title:"例子",slug:"例子",children:[]}],filePathRelative:"summary/tools/docker.md",git:{updatedTime:1639331509e3}}},3178:(e,d,c)=>{c.r(d),c.d(d,{default:()=>a});const o=(0,c(6252).uE)('<h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h1><p><img src="/img/docker_cli.jpg" alt=""></p><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><h3 id="三要素" tabindex="-1"><a class="header-anchor" href="#三要素" aria-hidden="true">#</a> 三要素</h3><ul><li>镜像(Image)</li><li>容器(container)</li><li>仓库(repository)</li></ul><p>镜像是一个打包模版，可以创建多个容器，每个容器都是相互隔离的微版<code>linux</code>环境</p><p>镜像可以是看做一个千层卷的文件系统，可以在构建的容器中利用commit来构建新的images</p><h3 id="数据卷-volume" tabindex="-1"><a class="header-anchor" href="#数据卷-volume" aria-hidden="true">#</a> 数据卷(volume)</h3><p>用于容器的数据持久化和数据共享</p><ul><li>命令：<code>docker run -it /data:/containerData centos</code></li><li>Dockerfile中<code>VOLUME</code>指令， 主机的目录为默认，通过docker inspect查询</li></ul><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><h3 id="帮助命令" tabindex="-1"><a class="header-anchor" href="#帮助命令" aria-hidden="true">#</a> 帮助命令</h3><p><code>docker info</code> ：本机docker的运行实例等信息</p><p><code>docker --help</code>: 命令列表</p><h3 id="镜像命令" tabindex="-1"><a class="header-anchor" href="#镜像命令" aria-hidden="true">#</a> 镜像命令</h3><p><code>docker images</code>: 本机存在的镜像 ​ -a: 列出包含中间镜像层的所有images ​ -q: 只显示镜像id</p><p><code>docker search</code>：在远程仓库查询镜像资源 ​ -s: 指定超过一定星的镜像</p><p><code>docker pull</code>: 拉取镜像</p><p><code>docker rmi</code>: 删除镜像 ​ -f: 强制删除</p><h3 id="容器命令" tabindex="-1"><a class="header-anchor" href="#容器命令" aria-hidden="true">#</a> 容器命令</h3><p><code>docker run</code>: 用一个镜像新建并运行容器</p><p>-i：已交互方式运行</p><p>​ -t: 新开一个终端运行</p><p>-d: 后台运行容器</p><p>​ --name：容器名字</p><p>-v : 配置容器数据卷 -v 主机目录路径:容器目录路径</p><p><code>docker ps</code>: 列出正在运行的容器 -a 列出所有容器</p><p><code>exit</code>: 推出+停止容器 ctrl+q+p 推出容器</p><p><code>docker start</code>: 启动容器</p><p><code>docker restart</code>: 重启容器</p><p><code>docker stop</code>: 停止容器</p><p><code>docker rm</code>: 删除容器 docker rm -f $(docker ps -a -q) 删除所有容器</p><p><code>docker logs</code>: 容器日志</p><p>​ -t: 显示时间戳</p><p>-f：可以追加显示</p><p>--tail: 显示后面倒数几条</p><p><code>docker top</code>: 查看容器里跑的进程</p><p><code>docker inspect</code>: 以json格式显示容器的信息</p><p><code>docker attach</code>: 进入容器</p><p><code>docker exec</code>-it 容器id /bin/bash: 进入到容器的终端</p><p><code>docker commit</code>: 把某个容器提交为新镜像</p><p>​-a： 作者信息<br> -m : 提交信息</p><p><code>docker cp</code>: 拷贝容器文件到主机</p><h2 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile" aria-hidden="true">#</a> Dockerfile</h2><p>镜像构建的描述性编程文件， 利用 <code>docker build</code> 生成新镜像</p><p><code>FROM</code>: 从哪个基础镜像开始构建</p><p><code>MAINTAINER</code>: 镜像维护者的名字和邮箱</p><p><code>RUN</code>: 容器构建时需要运行的命令</p><p><code>EXPOSE</code>: 当前容器对外暴露的接口</p><p><code>WORKDIR</code>：指定创建容器后，终端默认的工作目录</p><p><code>ENV</code>: 构建镜像过程中设置的环境变量</p><p><code>ADD</code>: 将主机文件复制到容器并解压缩</p><p><code>COPY</code>: 将主机文件复制到容器</p><p><code>VOLUME</code>: 指定容器数据卷</p><p><code>CMD</code>: 指定容器启动后要运行的命令，最后一个有效</p><p><code>ENTRYPOINT</code>: 和CMD类似，但是可以追加命令参数</p><p><code>ONBUILD</code>: 在子镜像构建时触发的钩子</p><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h2>',58),r={},a=(0,c(3744).Z)(r,[["render",function(e,d){return o}]])},3744:(e,d)=>{d.Z=(e,d)=>{for(const[c,o]of d)e[c]=o;return e}}}]);