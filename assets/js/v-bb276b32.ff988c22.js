"use strict";(self.webpackChunkfe_note=self.webpackChunkfe_note||[]).push([[953],{5873:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-bb276b32",path:"/summary/browser/perf.html",title:"性能优化",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"JS如何影响DOM树的构建",slug:"js如何影响dom树的构建",children:[]},{level:2,title:"为什么CSS动画比较高效",slug:"为什么css动画比较高效",children:[]},{level:2,title:"页面性能优化总结",slug:"页面性能优化总结",children:[{level:3,title:"加载阶段",slug:"加载阶段",children:[]},{level:3,title:"交互阶段",slug:"交互阶段",children:[]}]}],filePathRelative:"summary/browser/perf.md",git:{updatedTime:1639331509e3}}},5385:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(6252).uE)('<h1 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化" aria-hidden="true">#</a> 性能优化</h1><p>在理解了页面渲染原理后，探讨几个常见页面性能问题并总结页面性能优化的常用方法。</p><h2 id="js如何影响dom树的构建" tabindex="-1"><a class="header-anchor" href="#js如何影响dom树的构建" aria-hidden="true">#</a> JS如何影响DOM树的构建</h2><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">let</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    div1<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;time.geekbang&#39;</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>浏览器在上面html构建DOM树过程中，在解析到<code>&lt;script&gt;</code>标签的时候，渲染引擎判断这是一段脚本，此时HTML解析器就会暂停DOM的解析，因为接下来JS有可能会修改当前已经生成的DOM。对于用src属性加载的js也是同样道理。</p><p>再来看下存在css文件的情况：</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code>\n<span class="token selector">//theme.css\ndiv</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>theme.css<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n            <span class="token keyword">let</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n            div1<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;time.geekbang&#39;</span> <span class="token comment">//需要DOM</span>\n            div1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span>  <span class="token comment">//需要CSSOM</span>\n        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>对于这种情况，JS引擎在解析代码前是不知道JS是否会操纵CSSOM的，所以渲染引擎在遇到JS脚本时，不管脚本是否操作了CSSOM，都会先去执行CSS文件下载，解析操作，再执行JS脚本。</p><h2 id="为什么css动画比较高效" tabindex="-1"><a class="header-anchor" href="#为什么css动画比较高效" aria-hidden="true">#</a> 为什么CSS动画比较高效</h2><p>在写 Web 应用的时候，你可能经常需要对某个元素做几何形状变换、透明度变换或者一些缩放操作，如果使用 JavaScript 来写这些效果，会牵涉到整个渲染流水线，所以 JavaScript 的绘制效率会非常低下。</p><p>这个时候可以使用 <code>will-change</code> 来告诉渲染引擎你对该元素做了一些特效变换，CSS代码如下：</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code>\n<span class="token selector">.box</span> <span class="token punctuation">{</span>\n<span class="token property">will-change</span><span class="token punctuation">:</span> transform<span class="token punctuation">,</span> opacity<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这段代码告诉渲染引擎box元素需要做几何变换和透明度操作，这是渲染引擎就会把该元素提升单独的图层，等这些变换发生时，通过合成线程直接去操作对应的图层即可。然后这些变换没有涉及到主线程，这样就大大提升了渲染的效率。</p><h2 id="页面性能优化总结" tabindex="-1"><a class="header-anchor" href="#页面性能优化总结" aria-hidden="true">#</a> 页面性能优化总结</h2><p>我们把可能会阻塞页面首次渲染的资源成为关键资源。</p><h3 id="加载阶段" tabindex="-1"><a class="header-anchor" href="#加载阶段" aria-hidden="true">#</a> 加载阶段</h3><ol><li>减少关键资源个数。增加async或者defer标识</li><li>减少关键资源大小。压缩，移除死代码等</li><li>减少关键资源RTT次数。CDN访问</li></ol><h3 id="交互阶段" tabindex="-1"><a class="header-anchor" href="#交互阶段" aria-hidden="true">#</a> 交互阶段</h3><ol><li><p>减少Javascript脚本执行时间。可以将大任务分解成多个任务，或者利用web worker来并行计算密集任务</p></li><li><p>避免同步布局</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> main_div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;mian_div&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">let</span> new_node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">let</span> textnode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&quot;time.geekbang&quot;</span><span class="token punctuation">)</span>\n    new_node<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>textnode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;mian_div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>new_node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//由于要获取到offsetHeight，</span>\n    <span class="token comment">//但是此时的offsetHeight还是老的数据，</span>\n    <span class="token comment">//所以需要立即执行布局操作</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>main_div<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>所谓同步布局就是指Javascript强制将计算样式和布局操作提前到当前的任务中。</p></li><li><p>避免布局抖动</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> time_li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;time_li&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> main_div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;mian_div&quot;</span><span class="token punctuation">)</span>\n        <span class="token keyword">let</span> new_node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span>\n        <span class="token keyword">let</span> textnode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&quot;time.geekbang&quot;</span><span class="token punctuation">)</span>\n        new_node<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>textnode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        new_node<span class="token punctuation">.</span>offsetHeight <span class="token operator">=</span> time_li<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">;</span>\n        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;mian_div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>new_node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>是指在一次Javascript运行过程中，多次强制布局和抖动操作</p></li><li><p>合理利用CSS动画</p><p>因为CSS合成动画是在合成线程完成的，不会占用主线程</p></li><li><p>避免频繁的垃圾回收</p><p>WeakMap，WeakSet优化</p></li></ol>',20),p={},e=(0,a(3744).Z)(p,[["render",function(n,s){return t}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,t]of s)n[a]=t;return n}}}]);