"use strict";(self.webpackChunkfe_note=self.webpackChunkfe_note||[]).push([[8894],{6747:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-9a342088",path:"/summary/js-base/memory.html",title:"内存管理",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"内存分配",slug:"内存分配",children:[]},{level:2,title:"内存回收",slug:"内存回收",children:[{level:3,title:"栈内存回收",slug:"栈内存回收",children:[]},{level:3,title:"堆内存回收",slug:"堆内存回收",children:[]}]},{level:2,title:"内存泄漏",slug:"内存泄漏",children:[]},{level:2,title:"内存泄漏排查",slug:"内存泄漏排查",children:[]},{level:2,title:"参考文章",slug:"参考文章",children:[]}],filePathRelative:"summary/js-base/memory.md",git:{updatedTime:1639904812e3}}},1235:(n,s,a)=>{a.r(s),a.d(s,{default:()=>g});var p=a(6252);const e=(0,p.uE)('<h1 id="内存管理" tabindex="-1"><a class="header-anchor" href="#内存管理" aria-hidden="true">#</a> 内存管理</h1><p>不像<strong>c</strong>语言，在程序运行需要我们手动分配 <code>malloc</code> 和释放内存 <code>free</code>。<strong>javascript</strong>拥有自动的内存管理机制，包括内存的分配，内存的回收。</p><h2 id="内存分配" tabindex="-1"><a class="header-anchor" href="#内存分配" aria-hidden="true">#</a> 内存分配</h2><p>在进入执行上下文，js引擎会为基本类型变量分配一块固定大小的内存块，位于栈区。对于对象变量会在内存堆区分配一块内存，在栈区存的只是这块堆区的内存地址，也称引用。因为堆区是树形结构，可以动态分配大小，符合对象和数组不定大小的特点。还有如果对象存在栈区，空间太大不利于调用栈的上下文切换。</p><p>另外对于对象类型的变量之间赋值，只是对堆内存地址的赋值。所以两个变量都指向同一块堆内存，修改其中一个变量，另外一个受影响。</p><p>比如下面代码:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&quot;极客时间&quot;</span>\n    <span class="token keyword">var</span> b <span class="token operator">=</span> a\n    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&quot;极客时间&quot;</span><span class="token punctuation">}</span>\n    <span class="token keyword">var</span> d <span class="token operator">=</span> c\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>再执行foo时，对应的内存模型如下：</p><p><img src="https://wozien-cloud-oss.oss-cn-shenzhen.aliyuncs.com/images/blog/51127624a725a18a0e12e0f5a7aadbf5.webp" alt=""></p><p>值得注意的是，闭包能访问到的变量是存在堆区。比如下面代码：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> myName <span class="token operator">=</span> <span class="token string">&quot;极客时间&quot;</span>\n    <span class="token keyword">let</span> test1 <span class="token operator">=</span> <span class="token number">1</span>\n    <span class="token keyword">const</span> test2 <span class="token operator">=</span> <span class="token number">2</span>\n    <span class="token keyword">var</span> innerBar <span class="token operator">=</span> <span class="token punctuation">{</span> \n        <span class="token function-variable function">setName</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newName</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            myName <span class="token operator">=</span> newName\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">getName</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span>\n            <span class="token keyword">return</span> myName\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> innerBar\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nbar<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;极客邦&quot;</span><span class="token punctuation">)</span>\nbar<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>大概的执行流程如下：</p><ol><li>当 JavaScript 引擎执行到 foo 函数时，首先会编译，并创建一个空执行上下文</li><li>在编译过程中，遇到内部函数 setName，JavaScript 引擎还要对内部函数做一次快速的词法扫描，发现该内部函数引用了 foo 函数中的 myName 变量，由于是内部函数引用了外部函数的变量，所以 JavaScript 引擎判断这是一个闭包，于是在堆空间创建换一个“closure(foo)”的对象（这是一个内部对象，JavaScript 是无法访问的），用来保存 myName 变量。</li><li>接着继续扫描到 getName 方法时，发现该函数内部还引用变量 test1，于是 JavaScript 引擎又将 test1 添加到“closure(foo)”对象中。这时候堆中的“closure(foo)”对象中就包含了 myName 和 test1 两个变量了。</li><li>由于 test2 并没有被内部函数引用，所以 test2 依然保存在调用栈中。</li></ol><p>所以在执行foo函数return语句时，对应的内存模型如下：</p><p><img src="https://wozien-cloud-oss.oss-cn-shenzhen.aliyuncs.com/images/blog/f9dd29ff5371c247e10546393c904edb.webp" alt=""></p><p>当下次执行 bar.setName 或者 bar.getName 时对应的函数上下文中就会包含闭包对象 <code>closur(foo)</code>，从而范围到对应的变量。</p><h2 id="内存回收" tabindex="-1"><a class="header-anchor" href="#内存回收" aria-hidden="true">#</a> 内存回收</h2><p>内存回收是指js引擎对不再使用的栈堆内存数据进行回收释放，减少系统运行压力。</p><h3 id="栈内存回收" tabindex="-1"><a class="header-anchor" href="#栈内存回收" aria-hidden="true">#</a> 栈内存回收</h3><p>调用栈中通过ESP指针指向当前正在执行的上下文，当函数执行完后，ESP指针会有一个下移的操作，垃圾回收器会清除ESP指针上层的执行上下文所占的栈空间。</p><p><img src="https://wozien-cloud-oss.oss-cn-shenzhen.aliyuncs.com/images/blog/b899cb27c0d92c31f9377db59939aaf3.jpg" alt=""></p><h3 id="堆内存回收" tabindex="-1"><a class="header-anchor" href="#堆内存回收" aria-hidden="true">#</a> 堆内存回收</h3><p>JS引擎会把堆空间分为新生代和老生代空间。新生代中存放的是生存时间短的对象，老生代中存放的生存时间久的对象。新生代空间的垃圾回收器叫副垃圾回收器，相反老生代的叫主回收器。</p><p>不管哪个回收器，它们的处理流程大致为：</p><ul><li>标记空间中活动对象和非活动对象</li><li>回收非活动对象所占据的内存</li><li>内存整理。防止存在大量的内存碎片，造成内存空间不足</li></ul><p><strong>副垃圾回收器</strong></p><p>该回收器采用 <code>Scavenge</code> 算法。 该算法是把新生代空间对半划分为两个区域，一半是对象区域，一半是空闲区域，如下图所示：</p><p><img src="https://wozien-cloud-oss.oss-cn-shenzhen.aliyuncs.com/images/blog/4f9310c7da631fa5a57f871099bfbeaf.webp" alt=""></p><p>新加入的对象都会存放到对象区域，当对象区域快被写满时，就需要执行一次垃圾清理操作。</p><p>在垃圾回收过程中，首先要对对象区域中的垃圾做标记；标记完成之后，就进入垃圾清理阶段，副垃圾回收器会把这些存活的对象复制到空闲区域中，同时它还会把这些对象有序地排列起来，所以这个复制过程，也就相当于完成了内存整理操作，复制后空闲区域就没有内存碎片了。</p><p>完成复制后，对象区域与空闲区域进行角色翻转，也就是原来的对象区域变成空闲区域，原来的空闲区域变成了对象区域。这样就完成了垃圾对象的回收操作，同时这种角色翻转的操作还能让新生代中的这两块区域无限重复使用下去。</p><p>JavaScript 引擎采用了对象晋升策略，也就是经过两次垃圾回收依然还存活的对象，会被移动到老生区中。</p><p><strong>主垃圾回收器</strong></p><p>除了新生区中晋升的对象，一些大的对象会直接被分配到老生区。因此老生区中的对象有两个特点，一个是对象占用空间大，另一个是对象存活时间长。</p><p>主垃圾回收器是采用标记 - 清除<code>(Mark-Sweep)</code>的算法进行垃圾回收的。在标记阶段，会从一组根元素开始，递归遍历这组根元素，在这个遍历过程中，能到达的元素称为活动对象，没有到达的元素就可以判断为垃圾数据。</p><p><img src="https://wozien-cloud-oss.oss-cn-shenzhen.aliyuncs.com/images/blog/6c8361d3e52c1c37a06699ed94652e69.webp" alt=""></p><p>在垃圾回收阶段，会把标记为垃圾的对象数据进行回收。为了防止碎片，中间还进行内存整理的过程。老生代的垃圾回收过程一般会比较耗时，如果主线程长时间执行垃圾回收，就会导致其他JS任务的阻塞，所以JS引擎采用了增量标记算法，它将标记过程分为一个个的子标记过程，同时让垃圾回收标记和 JavaScript 应用逻辑交替进行，直到标记阶段完成：</p><p><img src="https://wozien-cloud-oss.oss-cn-shenzhen.aliyuncs.com/images/blog/de117fc96ae425ed90366e9060aa14e7.webp" alt=""></p><h2 id="内存泄漏" tabindex="-1"><a class="header-anchor" href="#内存泄漏" aria-hidden="true">#</a> 内存泄漏</h2><p>内存泄漏是指对于不再使用的内存，没有及时回收。一般的内存泄漏都是不必要的引用造成，比如下面几种情况：</p><p><strong>意外的全局变量</strong></p><p>在函数内没有声明变量直接使用或者 <code>this</code> 的不正确使用：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n\n<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可以在文件头加上<code>&#39;use strict&#39;</code>, 使用严格模式避免意外的全局变量。如果必要要使用全局变量来存数据，使用完后要设置成 <code>null</code>。</p><p><strong>没有清除定时器和事件回调</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;zzz&#39;</span><span class="token punctuation">}</span>\n\n<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      dom<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面代码即使节点被移除，但是定时器在运行，保存着对对象的引用。解决办法就是在dom不存在的时候清除定时器。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>\nbtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面的情况在IE版本还要对事件回调解除引用，现代浏览器可不用考虑。因为他会认为节点移除后，回调是永远不会被触发的。</p><p><strong>超出dom的引用</strong></p><p>假设a是对一个表格节点的引用。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;td1&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;table2&#39;</span><span class="token punctuation">)</span>\n\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\nb <span class="token operator">=</span> <span class="token keyword">null</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面的情况即使移除了包含 <code>td</code> 节点的整个表格，但是变量a引用了<code>td</code>节点，子节点又引用了父节点，所以在内存中的<code>table</code>节点空间不会被回收。</p><p><strong>不正当的使用闭包</strong></p><p>因为闭包变量是不会被内存回收的，所以如果闭包引用了一些不必要的变量或者引用的变量很大，都会影响性能的。</p><h2 id="内存泄漏排查" tabindex="-1"><a class="header-anchor" href="#内存泄漏排查" aria-hidden="true">#</a> 内存泄漏排查</h2><p><strong>使用浏览器的<code>devTools</code></strong></p><p>chrome浏览器f12-&gt;memory, 点击保存堆内存快照，重点关注下面几点</p><img src="http://blog.inoob.xyz/posts/f616d4a/1.png" width="700"><ul><li><code>shallow size</code>: 对应的类对象所占用的堆内存，不包含属性的引用的内存</li><li><code>retained size</code>: 对应的类对象所占用的堆内存，包含属性的引用的内存</li></ul><p>然后模拟用户操作，再次保存堆内存快照，切换第二张快照的 <code>comparsion</code>对比视图：</p><img src="http://blog.inoob.xyz/posts/f616d4a/2.png" width="700"><p>可以看出新增和删除的内存的大小。如果多次快照的内存都是不断上升，那么就可能存在内存泄漏。</p><p><strong>使用WeakMap</strong></p><p>对于某些不想关注的引用，又不让它影响内存回收机制，可以是设置成 <code>WeakMap</code> 对象的键值对。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>',66),t={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management"),c={href:"https://juejin.im/post/5b10ba336fb9a01e66164346",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("https://juejin.im/post/5b10ba336fb9a01e66164346"),r={href:"https://segmentfault.com/a/1190000011231206",target:"_blank",rel:"noopener noreferrer"},u=(0,p.Uk)("https://segmentfault.com/a/1190000011231206"),i={href:"https://github.com/yygmind/blog/issues/16",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("https://github.com/yygmind/blog/issues/16"),d={href:"http://www.ruanyifeng.com/blog/2017/04/memory-leak.html",target:"_blank",rel:"noopener noreferrer"},b=(0,p.Uk)("http://www.ruanyifeng.com/blog/2017/04/memory-leak.html"),m={},g=(0,a(3744).Z)(m,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("p",null,[(0,p._)("a",t,[o,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",c,[l,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",r,[u,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",i,[k,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",d,[b,(0,p.Wm)(a)])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);