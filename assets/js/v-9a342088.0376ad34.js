"use strict";(self.webpackChunkfe_note=self.webpackChunkfe_note||[]).push([[894],{6747:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-9a342088",path:"/summary/js-base/memory.html",title:"内存管理",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"内存分配",slug:"内存分配",children:[]},{level:2,title:"内存回收",slug:"内存回收",children:[{level:3,title:"引用计数法",slug:"引用计数法",children:[]},{level:3,title:"标记清除",slug:"标记清除",children:[]}]},{level:2,title:"内存泄漏",slug:"内存泄漏",children:[]},{level:2,title:"内存泄漏排查",slug:"内存泄漏排查",children:[]},{level:2,title:"参考文章",slug:"参考文章",children:[]}],filePathRelative:"summary/js-base/memory.md",git:{updatedTime:1635181848e3}}},6861:(n,s,a)=>{a.r(s),a.d(s,{default:()=>h});var p=a(6252);const e=(0,p.uE)('<h1 id="内存管理" tabindex="-1"><a class="header-anchor" href="#内存管理" aria-hidden="true">#</a> 内存管理</h1><p>不像<strong>c</strong>语言，在程序运行需要我们手动分配 <code>malloc</code> 和释放内存 <code>free</code>。<strong>javascript</strong>拥有自动的内存管理机制，包括内存的分配，内存的回收。</p><h2 id="内存分配" tabindex="-1"><a class="header-anchor" href="#内存分配" aria-hidden="true">#</a> 内存分配</h2><p>在进入执行上下文，js引擎会为基本类型变量分配一块固定大小的内存块，位于栈区。对于对象变量会在内存堆区分配一块内存，在栈区存的只是这块堆区的内存地址，也称引用。因为堆区是树形结构，可以动态分配大小，符合对象和数组不定大小的特点。</p><p>另外值得注意的是，闭包能访问到的变量是存在堆区。</p><p>对于对象类型的变量之间赋值，只是对堆内存地址的赋值。所以两个变量都指向同一块堆内存，修改其中一个变量，另外一个受影响。</p><p>如下测试代码：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>n<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>\na<span class="token punctuation">.</span>x <span class="token operator">=</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>n<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">)</span>  <span class="token comment">// undefined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span>   <span class="token comment">// {n:2}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>第一步，变量a被赋值为对象 <code>{n:1}</code>，并且指向它</li><li>然后把a赋值b，b也指向对象 <code>{n:1}</code></li><li>最后比较复杂，它要考虑js中左查询优先于右查询。所以<code>a.x</code> 先执行，因为对一个不存在的对象属性取值，如果不存在会默认为 <code>undefined</code>，所以a和b指向对象变成了<code>{n:1,x:undefined}</code>，然后等待赋值表达式赋值。其次，赋值表达式从右到左，a指向了<code>{n:2}</code>,然后原来指向内存对象的x属性也被赋值为 <code>{n:2}</code></li></ul><p>给对象类型的变量赋予 <code>null</code>，会让它和原来指向的堆内存断开关系，使得堆内存数据的引用数减一。</p><h2 id="内存回收" tabindex="-1"><a class="header-anchor" href="#内存回收" aria-hidden="true">#</a> 内存回收</h2><p>内存回收是指js引擎对不再使用的堆内存数据进行回收释放，减少系统运行压力。比如函数上下文执行完，局部的变量会被默认赋予<code>null</code>，并且回收。对于全局上下文，除非网页关闭，不然会常驻内存。这就是不提倡声明全局变量的原因。</p><p>如何判断一个对象不再使用，这就是js的内存回收算法。一般包括引用计数法和标记清除法。</p><h3 id="引用计数法" tabindex="-1"><a class="header-anchor" href="#引用计数法" aria-hidden="true">#</a> 引用计数法</h3><p>这是一个基本废弃的算法，目前低版本IE浏览器还在使用。它是指如果一个对象存在一个引用指向它，该对象的引用计数就加1。内存会回收引用次数为0的对象。</p><p>但是这种方式存在一种缺陷，就是对于循环引用的内存，永远无法回收，造成内存泄漏。比如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">circleReferrer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    o1<span class="token punctuation">.</span>a <span class="token operator">=</span> o2   <span class="token comment">// o2被引用</span>\n    o2<span class="token punctuation">.</span>a <span class="token operator">=</span> o1    <span class="token comment">// o1被引用</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">circleReferrer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="标记清除" tabindex="-1"><a class="header-anchor" href="#标记清除" aria-hidden="true">#</a> 标记清除</h3><p>现代浏览器都是基于该回收算法。它是指可以从js全局对象访达的对象标记为活跃状态，下一次内存会回收没有标记的对象。所以不再引用的对象一定不能访问，但是反过来就不一定了。</p><p>正常情况下，正在处于执行环境的变量是不会被回收，因为程序还可能要用到这些变量，只有离开执行环境才有可能被回收，但是闭包变量除外。因为闭包变量永远可以通过闭包函数访问到，使的标记一直存在。如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> closure <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token function">closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 1</span>\n\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token comment">// 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>可以令 <code>closure = null</code>, 使得闭包函数不存在引用，从而对象 <code>obj</code> 无法访达，下次会被内存回收。</p><p>这种算法很好解决了循环引用问题。比如上面循环引用的例子，在函数<code>circleReferrer</code>执行完后，对象o1和o2无法再次访问。因为重新调用一个函数是新分配的对象，所以会被内存回收。</p><h2 id="内存泄漏" tabindex="-1"><a class="header-anchor" href="#内存泄漏" aria-hidden="true">#</a> 内存泄漏</h2><p>内存泄漏是指对于不再使用的内存，没有及时回收。一般的内存泄漏都是不必要的引用造成，比如下面几种情况：</p><p><strong>意外的全局变量</strong>。</p><p>在函数内没有声明变量直接使用或者 <code>this</code> 的不正确使用：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n\n<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可以在文件头加上<code>&#39;use strict&#39;</code>, 使用严格模式避免意外的全局变量。如果必要要使用全局变量来存数据，使用完后要设置成 <code>null</code>。</p><p>** 没有清除定时器和事件回调 **</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;zzz&#39;</span><span class="token punctuation">}</span>\n\n<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      dom<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面代码即使节点被移除，但是定时器在运行，保存着对对象的引用。解决办法就是在dom不存在的时候清除定时器。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>\nbtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面的情况在IE版本还要对事件回调解除引用，现代浏览器可不用考虑。因为他会认为节点移除后，回调是永远不会被触发的。</p><p>** 超出dom的引用 **</p><p>假设a是对一个表格节点的引用。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;td1&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;table2&#39;</span><span class="token punctuation">)</span>\n\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\nb <span class="token operator">=</span> <span class="token keyword">null</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面的情况即使移除了包含 <code>td</code> 节点的整个表格，但是变量a引用了<code>td</code>节点，子节点又引用了父节点，所以在内存中的<code>table</code>节点空间不会被回收。</p><p>** 不正当的使用闭包 **</p><p>因为闭包变量是不会被内存回收的，所以如果闭包引用了一些不必要的变量或者引用的变量很大，都会影响性能的。</p><h2 id="内存泄漏排查" tabindex="-1"><a class="header-anchor" href="#内存泄漏排查" aria-hidden="true">#</a> 内存泄漏排查</h2><p>** 使用浏览器的<code>devTools</code> **</p><p>chrome浏览器f12-&gt;memory, 点击保存堆内存快照，重点关注下面几点</p><img src="http://blog.inoob.xyz/posts/f616d4a/1.png" width="700"><ul><li><code>shallow size</code>: 对应的类对象所占用的堆内存，不包含属性的引用的内存</li><li><code>retained size</code>: 对应的类对象所占用的堆内存，包含属性的引用的内存</li></ul><p>然后模拟用户操作，再次保存堆内存快照，切换第二张快照的 <code>comparsion</code>对比视图：</p><img src="http://blog.inoob.xyz/posts/f616d4a/2.png" width="700"><p>可以看出新增和删除的内存的大小。如果多次快照的内存都是不断上升，那么就可能存在内存泄漏。</p><p>** 使用WeakMap **</p><p>对于某些不想关注的引用，又不让它影响内存回收机制，可以是设置成 <code>WeakMap</code> 对象的键值对。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>',51),t={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management"),c={href:"https://juejin.im/post/5b10ba336fb9a01e66164346",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("https://juejin.im/post/5b10ba336fb9a01e66164346"),u={href:"https://segmentfault.com/a/1190000011231206",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("https://segmentfault.com/a/1190000011231206"),i={href:"https://github.com/yygmind/blog/issues/16",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("https://github.com/yygmind/blog/issues/16"),d={href:"http://www.ruanyifeng.com/blog/2017/04/memory-leak.html",target:"_blank",rel:"noopener noreferrer"},b=(0,p.Uk)("http://www.ruanyifeng.com/blog/2017/04/memory-leak.html"),m={},h=(0,a(3744).Z)(m,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("p",null,[(0,p._)("a",t,[o,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",c,[l,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",u,[r,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",i,[k,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",d,[b,(0,p.Wm)(a)])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);