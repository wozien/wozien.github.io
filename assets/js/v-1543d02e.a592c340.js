"use strict";(self.webpackChunkfe_note=self.webpackChunkfe_note||[]).push([[7118],{9994:(s,n,e)=>{e.r(n),e.d(n,{data:()=>a});const a={key:"v-1543d02e",path:"/summary/browser/v8.html",title:"v8 工作原理",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"编译器和解析器",slug:"编译器和解析器",children:[]},{level:2,title:"v8 如何执行一段代码",slug:"v8-如何执行一段代码",children:[{level:3,title:"生成抽象语法树（AST）和执行上下文",slug:"生成抽象语法树-ast-和执行上下文",children:[]},{level:3,title:"生成字节码",slug:"生成字节码",children:[]},{level:3,title:"执行代码阶段",slug:"执行代码阶段",children:[]}]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"summary/browser/v8.md",git:{updatedTime:1639904812e3}}},5176:(s,n,e)=>{e.r(n),e.d(n,{default:()=>p});const a=(0,e(6252).uE)('<h1 id="v8-工作原理" tabindex="-1"><a class="header-anchor" href="#v8-工作原理" aria-hidden="true">#</a> v8 工作原理</h1><h2 id="编译器和解析器" tabindex="-1"><a class="header-anchor" href="#编译器和解析器" aria-hidden="true">#</a> 编译器和解析器</h2><p>编译型语言在程序执行之前，需要经过编译器的编译过程，并且编译之后会直接保留机器能读懂的二进制文件，这样每次运行程序时，都可以直接运行该二进制文件，而不需要再次重新编译了。比如 C/C++、GO 等都是编译型语言。</p><p>而由解释型语言编写的程序，在每次运行时都需要通过解释器对程序进行动态解释和执行。比如 Python、JavaScript 等都属于解释型语言。</p><p><img src="https://wozien-cloud-oss.oss-cn-shenzhen.aliyuncs.com/images/blog/4e196603ecb78188e99e963e251b9781.webp" alt=""></p><p>从图中你可以看出这二者的执行流程，大致可阐述为如下：</p><ol><li><p>在编译型语言的编译过程中，编译器首先会依次对源代码进行词法分析、语法分析，生成抽象语法树（AST），然后是优化代码，最后再生成处理器能够理解的机器码。如果编译成功，将会生成一个可执行的文件。但如果编译过程发生了语法或者其他的错误，那么编译器就会抛出异常，最后的二进制文件也不会生成成功。</p></li><li><p>在解释型语言的解释过程中，同样解释器也会对源代码进行词法分析、语法分析，并生成抽象语法树（AST），不过它会再基于抽象语法树生成字节码，最后再根据字节码来执行程序、输出结果。</p></li></ol><h2 id="v8-如何执行一段代码" tabindex="-1"><a class="header-anchor" href="#v8-如何执行一段代码" aria-hidden="true">#</a> v8 如何执行一段代码</h2><h3 id="生成抽象语法树-ast-和执行上下文" tabindex="-1"><a class="header-anchor" href="#生成抽象语法树-ast-和执行上下文" aria-hidden="true">#</a> 生成抽象语法树（AST）和执行上下文</h3><p>不管是编译器还是解析器，第一步都会把源代码转为结构化的数据(AST), 编译器或者解释器后续的工作都需要依赖于AST，而不是源代码，比如下面的代码转为AST如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token keyword">var</span> myName <span class="token operator">=</span> <span class="token string">&quot;极客时间&quot;</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token number">23</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nmyName <span class="token operator">=</span> <span class="token string">&quot;geektime&quot;</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>生成AST如下：</p><p><img src="https://wozien-cloud-oss.oss-cn-shenzhen.aliyuncs.com/images/blog/7320526ef14d974be8393effcf25b436.webp" alt=""></p><p>比如我们常见的Babel和ESlint也是把原代码转为AST才进行后续的转化处理的。从源代码到AST的过程大概如下：</p><p><strong>第一阶段是分词（tokenize），又称为词法分析</strong>，其作用是将一行行的源码拆解成一个个 token。所谓 token，指的是语法上不可能再分的、最小的单个字符或字符串。你可以参考下图来更好地理解什么 token:</p><p><img src="https://wozien-cloud-oss.oss-cn-shenzhen.aliyuncs.com/images/blog/838028071f63a132cc8b27b23960e5f5.webp" alt=""></p><p><strong>第二阶段是解析（parse），又称为语法分析</strong>，其作用是将上一步生成的 token 数据，根据语法规则转为 AST。如果源码符合语法规则，这一步就会顺利完成。但如果源码存在语法错误，这一步就会终止，并抛出一个“语法错误”。这就是 AST 的生成过程，先分词，再解析。</p><h3 id="生成字节码" tabindex="-1"><a class="header-anchor" href="#生成字节码" aria-hidden="true">#</a> 生成字节码</h3><p>在生成AST后， 解析器(lgnition)会根据AST生成对应的字节码。<strong>字节码就是介于 AST 和机器码之间的一种代码。但是与特定类型的机器码无关，字节码需要通过解释器将其转换为机器码后才能执行。</strong> 之所以要生成字节码，而不直接生成机器码，是为了优化内存占用，应该机器码更加占用内存。</p><p><img src="https://wozien-cloud-oss.oss-cn-shenzhen.aliyuncs.com/images/blog/87d1ab147d1dc4b78488e2443d58a3ff.webp" alt=""></p><h3 id="执行代码阶段" tabindex="-1"><a class="header-anchor" href="#执行代码阶段" aria-hidden="true">#</a> 执行代码阶段</h3><p>接下来，解析器会逐行执行字节码，生成机器码并且执行。如果解析过程遇到需要经常解析的代码，v8引擎会调用编译器TurboFan把这段代码提前生成机器码并保存，下次调用时执行机器码，跳过字节码解析的过程，起到一定的优化。这样代码成为热点代码 <strong>(HotSpot)</strong>。</p><p>其实字节码配合解释器和编译器是最近一段时间很火的技术，比如 Java 和 Python 的虚拟机也都是基于这种技术实现的，我们把这种技术称为即时编译（JIT）。</p><p>JIT的解析过程可以表示如下图：</p><p><img src="https://wozien-cloud-oss.oss-cn-shenzhen.aliyuncs.com/images/blog/662413313149f66fe0880113cb6ab98a.webp" alt=""></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>大致执行流程如下：</p><p><img src="https://wozien-cloud-oss.oss-cn-shenzhen.aliyuncs.com/images/blog/1af282bdc4036096c03074da53eb84ae.webp" alt=""></p>',28),t={},p=(0,e(3744).Z)(t,[["render",function(s,n){return a}]])},3744:(s,n)=>{n.Z=(s,n)=>{for(const[e,a]of n)s[e]=a;return s}}}]);