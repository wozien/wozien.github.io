"use strict";(self.webpackChunkfe_note=self.webpackChunkfe_note||[]).push([[5177],{9655:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-a1b9bc52",path:"/source/vue/slot.html",title:"插槽 slot",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"普通插槽",slug:"普通插槽",children:[{level:3,title:"父组件渲染函数",slug:"父组件渲染函数",children:[]},{level:3,title:"子组件渲染函数",slug:"子组件渲染函数",children:[]},{level:3,title:"运行时阶段",slug:"运行时阶段",children:[]}]},{level:2,title:"作用域插槽",slug:"作用域插槽",children:[{level:3,title:"父组件渲染函数",slug:"父组件渲染函数-1",children:[]},{level:3,title:"子组件渲染函数",slug:"子组件渲染函数-1",children:[]},{level:3,title:"运行时阶段",slug:"运行时阶段-1",children:[]}]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"source/vue/slot.md",git:{updatedTime:1636371816e3}}},5833:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="插槽-slot" tabindex="-1"><a class="header-anchor" href="#插槽-slot" aria-hidden="true">#</a> 插槽 slot</h1><p>Vue允许我们为组件自定义子模版，这部分内容会替换组件模版中<code>slot</code>标签，这就是插槽。那么子组件在渲染过程中是怎么获取到父组件对应的插槽模版的，现在就通过源码来分析。</p><h2 id="普通插槽" tabindex="-1"><a class="header-anchor" href="#普通插槽" aria-hidden="true">#</a> 普通插槽</h2><p>来看一个普通插槽的例子:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token punctuation">{</span>\n  template<span class="token operator">:</span>\n    <span class="token string">&#39;&lt;div class=&quot;container&quot;&gt;&#39;</span> <span class="token operator">+</span>\n    <span class="token string">&#39;&lt;header&gt;&lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;&lt;/header&gt;&#39;</span> <span class="token operator">+</span>\n    <span class="token string">&#39;&lt;main&gt;&lt;slot&gt;默认内容&lt;/slot&gt;&lt;/main&gt;&#39;</span> <span class="token operator">+</span>\n    <span class="token string">&#39;&lt;footer&gt;&lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;&lt;/footer&gt;&#39;</span> <span class="token operator">+</span>\n    <span class="token string">&#39;&lt;/div&gt;&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  el<span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>\n  template<span class="token operator">:</span>\n    <span class="token string">&#39;&lt;div&gt;&#39;</span> <span class="token operator">+</span>\n    <span class="token string">&#39;&lt;Child&gt;&#39;</span> <span class="token operator">+</span>\n    <span class="token string">&#39;&lt;h1 slot=&quot;header&quot;&gt;{{title}}&lt;/h1&gt;&#39;</span> <span class="token operator">+</span>\n    <span class="token string">&#39;&lt;p&gt;{{msg}}&lt;/p&gt;&#39;</span> <span class="token operator">+</span>\n    <span class="token string">&#39;&lt;p slot=&quot;footer&quot;&gt;{{desc}}&lt;/p&gt;&#39;</span> <span class="token operator">+</span>\n    <span class="token string">&#39;&lt;/Child&gt;&#39;</span> <span class="token operator">+</span>\n    <span class="token string">&#39;&lt;/div&gt;&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      title<span class="token operator">:</span> <span class="token string">&#39;我是标题&#39;</span><span class="token punctuation">,</span>\n      msg<span class="token operator">:</span> <span class="token string">&#39;我是内容&#39;</span><span class="token punctuation">,</span>\n      desc<span class="token operator">:</span> <span class="token string">&#39;其它信息&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  components<span class="token operator">:</span> <span class="token punctuation">{</span> Child <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>在看源码前，带着几个疑问：</p><ul><li>在编译阶段是怎么解析父组件的<code>slot</code>属性和子组件的<code>slot</code>标签</li><li>创建<code>slot</code>虚拟节点的代码是怎么样的</li><li>在运行时，子组件生成<code>slot</code>的虚拟节点是怎么获取到父组件对应的插槽模版</li></ul><h3 id="父组件渲染函数" tabindex="-1"><a class="header-anchor" href="#父组件渲染函数" aria-hidden="true">#</a> 父组件渲染函数</h3><p>在父组件的编译解析阶段，会在<code>src/compiler/parser/index.js</code>的<code>processSlotContent</code>方法解析带<code>slot</code>属性的标签。对于我们例子会命中该方法的下面逻辑:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// slot=&quot;xxx&quot;</span>\n<span class="token keyword">const</span> slotTarget <span class="token operator">=</span> <span class="token function">getBindingAttr</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;slot&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>slotTarget<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  el<span class="token punctuation">.</span>slotTarget <span class="token operator">=</span> slotTarget <span class="token operator">===</span> <span class="token string">&#39;&quot;&quot;&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;&quot;default&quot;&#39;</span> <span class="token operator">:</span> slotTarget\n  el<span class="token punctuation">.</span>slotTargetDynamic <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>attrsMap<span class="token punctuation">[</span><span class="token string">&#39;:slot&#39;</span><span class="token punctuation">]</span> <span class="token operator">||</span> el<span class="token punctuation">.</span>attrsMap<span class="token punctuation">[</span><span class="token string">&#39;v-bind:slot&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token comment">// preserve slot as an attribute for native shadow DOM compat</span>\n  <span class="token comment">// only for non-scoped slots.</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag <span class="token operator">!==</span> <span class="token string">&#39;template&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>slotScope<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">addAttr</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;slot&#39;</span><span class="token punctuation">,</span> slotTarget<span class="token punctuation">,</span> <span class="token function">getRawBindingAttr</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;slot&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这个方法获取属性<code>slot</code>对应的值<code>slotTarget</code>，然后在对应ast的节点上增加<code>slotTarget</code>属性，并在<code>attrs</code>属性集合上增加对象<code>{name: &#39;slot&#39;, value: slotTarget}</code>。</p><p>在代码生成的<code>genData</code>会对<code>slotTarget</code>属性的ast节点进行处理：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// only for non-scoped slots</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>slotTarget <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>slotScope<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  data <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">slot:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>slotTarget<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这个逻辑是在渲染函数代码的<code>data</code>加上<code>slot</code>属性，值就是我们该解析标签获取的<code>slotTarget</code>。所以我们例子的父组件的渲染函数代码为：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">with</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">_c</span><span class="token punctuation">(</span>\n    <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>\n      <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;Child&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n        <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> attrs<span class="token operator">:</span> <span class="token punctuation">{</span> slot<span class="token operator">:</span> <span class="token string">&#39;header&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> slot<span class="token operator">:</span> <span class="token string">&#39;header&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token function">_s</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token function">_s</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> attrs<span class="token operator">:</span> <span class="token punctuation">{</span> slot<span class="token operator">:</span> <span class="token string">&#39;footer&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> slot<span class="token operator">:</span> <span class="token string">&#39;footer&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token function">_s</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token number">1</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="子组件渲染函数" tabindex="-1"><a class="header-anchor" href="#子组件渲染函数" aria-hidden="true">#</a> 子组件渲染函数</h3><p>子组件的解析阶段要对<code>slot</code>标签进行处理。在解析入口文件的<code>processSlotOutlet</code>方法中处理，它只是在对应的ast的节点加上<code>slotName</code>属性，值为我们设置的插槽name：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">processSlotOutlet</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;slot&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    el<span class="token punctuation">.</span>slotName <span class="token operator">=</span> <span class="token function">getBindingAttr</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在代码生成阶段，如果遇到ast节点的tag是<code>slot</code>的话，会调用<code>genSlot</code>函数进行统一处理：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// src/compiler/codegen/index.js</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">genElement</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token operator">:</span> ASTElement<span class="token punctuation">,</span> state<span class="token operator">:</span> CodegenState</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>\n\n<span class="token comment">// ...</span>\n\n<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;slot&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">genSlot</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n  \n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">genSlot</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token operator">:</span> ASTElement<span class="token punctuation">,</span> state<span class="token operator">:</span> CodegenState</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> slotName <span class="token operator">=</span> el<span class="token punctuation">.</span>slotName <span class="token operator">||</span> <span class="token string">&#39;&quot;default&quot;&#39;</span>\n  <span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token function">genChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">_t(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>slotName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>children <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>children<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token keyword">const</span> attrs <span class="token operator">=</span> el<span class="token punctuation">.</span>attrs <span class="token operator">||</span> el<span class="token punctuation">.</span>dynamicAttrs\n    <span class="token operator">?</span> <span class="token function">genProps</span><span class="token punctuation">(</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>attrs <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>dynamicAttrs <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">attr</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token comment">// slot props are camelized</span>\n        name<span class="token operator">:</span> <span class="token function">camelize</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        value<span class="token operator">:</span> attr<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n        dynamic<span class="token operator">:</span> attr<span class="token punctuation">.</span>dynamic\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token operator">:</span> <span class="token keyword">null</span>\n  <span class="token keyword">const</span> bind <span class="token operator">=</span> el<span class="token punctuation">.</span>attrsMap<span class="token punctuation">[</span><span class="token string">&#39;v-bind&#39;</span><span class="token punctuation">]</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>attrs <span class="token operator">||</span> bind<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">,null</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>attrs<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>bind<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>attrs <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;,null&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>bind<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> res <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>这个函数对于我们例子只会执行下面的关键逻辑：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> slotName <span class="token operator">=</span> el<span class="token punctuation">.</span>slotName <span class="token operator">||</span> <span class="token string">&#39;&quot;default&quot;&#39;</span>\n<span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token function">genChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>\n<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">_t(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>slotName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>children <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>children<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>其他部分是获取<code>slot</code>标签的属性，这个是作用域插槽的处理，我们稍后再分析。<code>children</code>是插槽的默认内容的渲染代码，所以我们的<code>slot</code>标签的生成代码是使用<code>_t</code>函数包裹。最终，我们来看下子组件的渲染函数代码：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">with</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> staticClass<span class="token operator">:</span> <span class="token string">&#39;container&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n    <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;header&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_t</span><span class="token punctuation">(</span><span class="token string">&#39;header&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_t</span><span class="token punctuation">(</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token string">&#39;默认内容&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;footer&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_t</span><span class="token punctuation">(</span><span class="token string">&#39;footer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="运行时阶段" tabindex="-1"><a class="header-anchor" href="#运行时阶段" aria-hidden="true">#</a> 运行时阶段</h3><p>父组件执行<code>render</code>函数和正常一样，在创建组件占位虚拟节点时，组件包裹的每个插槽vnode也会被创建。另外会把<code>children</code>作为占位节点的组件属性：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">vue-component-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Ctor<span class="token punctuation">.</span>cid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  data<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> Ctor<span class="token punctuation">,</span> propsData<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> children <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  asyncFactory\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在子组件实例初始化合并配置中，会把组件的占位节点的<code>children</code>属性给实例配置的<code>_renderChildren</code>属性：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initInternalComponent</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token operator">:</span> Component<span class="token punctuation">,</span> options<span class="token operator">:</span> InternalComponentOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n<span class="token comment">// ...</span>\n <span class="token keyword">const</span> parentVnode <span class="token operator">=</span> options<span class="token punctuation">.</span>_parentVnode\n<span class="token keyword">const</span> vnodeComponentOptions <span class="token operator">=</span> parentVnode<span class="token punctuation">.</span>componentOptions\nopts<span class="token punctuation">.</span>_renderChildren <span class="token operator">=</span> vnodeComponentOptions<span class="token punctuation">.</span>children\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>然后执行<code>initRender</code>方法进行渲染的初始化工作，这个方法中会调用<code>resolveSlots</code>方法获取组件实例的<code>vm.$slots</code>的值：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>vm<span class="token punctuation">.</span>$slots <span class="token operator">=</span> <span class="token function">resolveSlots</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>_renderChildren<span class="token punctuation">,</span> renderContext<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>resolveSlots</code>方法定义在<code>src/core/instance/render-helpers/resolve-slots.js</code>中：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 获取组件实例的vm.$slots</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">resolveSlots</span> <span class="token punctuation">(</span>\n  <span class="token parameter">children<span class="token operator">:</span> <span class="token operator">?</span>Array<span class="token operator">&lt;</span>VNode<span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  context<span class="token operator">:</span> <span class="token operator">?</span>Component</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>VNode<span class="token operator">&gt;</span> <span class="token punctuation">}</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>children <span class="token operator">||</span> <span class="token operator">!</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> slots <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> child <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token keyword">const</span> data <span class="token operator">=</span> child<span class="token punctuation">.</span>data\n    <span class="token comment">// remove slot attribute if the node is resolved as a Vue slot node</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>attrs <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>slot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">delete</span> data<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>slot\n    <span class="token punctuation">}</span>\n    <span class="token comment">// named slots should only be respected if the vnode was rendered in the</span>\n    <span class="token comment">// same context.</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>context <span class="token operator">===</span> context <span class="token operator">||</span> child<span class="token punctuation">.</span>fnContext <span class="token operator">===</span> context<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n      data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>slot <span class="token operator">!=</span> <span class="token keyword">null</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> name <span class="token operator">=</span> data<span class="token punctuation">.</span>slot\n      <span class="token keyword">const</span> slot <span class="token operator">=</span> <span class="token punctuation">(</span>slots<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>slots<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;template&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        slot<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>slot<span class="token punctuation">,</span> child<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        slot<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token punctuation">(</span>slots<span class="token punctuation">.</span>default <span class="token operator">||</span> <span class="token punctuation">(</span>slots<span class="token punctuation">.</span>default <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// ignore slots that contains only whitespace</span>\n  <span class="token comment">// 删除空白的slot节点</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> name <span class="token keyword">in</span> slots<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>slots<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isWhitespace<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">delete</span> slots<span class="token punctuation">[</span>name<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> slots\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>这个方法<code>children</code>是值组件标签包含的虚拟节点，也就是组件实例的<code>_renderChildren</code>属性值。这个方法循环<code>children</code>子节点，获取节点<code>data</code>属性的<code>slot</code>值作为返回结果对象的key，对应的值就是该子节点。所以这个方法就是构造<code>slot</code>名到虚拟节点映射对象，对于我们例子的结果是：</p><img src="http://blog.inoob.xyz/posts/2ad031ec/1.jpg"><p>接着子组件挂载并执行自身的<code>render</code>函数，对应<code>slot</code>节点在编译阶段知道它会用<code>_t</code>函数创建。这个函数是Vue虚拟节点的渲染辅助函数之一，它们的定义入口在<code>src/core/instance/render-helpers/index.js</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">installRenderHelpers</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">.</span>_o <span class="token operator">=</span> markOnce\n  target<span class="token punctuation">.</span>_n <span class="token operator">=</span> toNumber\n  target<span class="token punctuation">.</span>_s <span class="token operator">=</span> toString\n  target<span class="token punctuation">.</span>_l <span class="token operator">=</span> renderList\n  target<span class="token punctuation">.</span>_t <span class="token operator">=</span> renderSlot\n  target<span class="token punctuation">.</span>_q <span class="token operator">=</span> looseEqual\n  target<span class="token punctuation">.</span>_i <span class="token operator">=</span> looseIndexOf\n  target<span class="token punctuation">.</span>_m <span class="token operator">=</span> renderStatic\n  target<span class="token punctuation">.</span>_f <span class="token operator">=</span> resolveFilter\n  target<span class="token punctuation">.</span>_k <span class="token operator">=</span> checkKeyCodes\n  target<span class="token punctuation">.</span>_b <span class="token operator">=</span> bindObjectProps\n  target<span class="token punctuation">.</span>_v <span class="token operator">=</span> createTextVNode\n  target<span class="token punctuation">.</span>_e <span class="token operator">=</span> createEmptyVNode\n  target<span class="token punctuation">.</span>_u <span class="token operator">=</span> resolveScopedSlots\n  target<span class="token punctuation">.</span>_g <span class="token operator">=</span> bindObjectListeners\n  target<span class="token punctuation">.</span>_d <span class="token operator">=</span> bindDynamicKeys\n  target<span class="token punctuation">.</span>_p <span class="token operator">=</span> prependModifier\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>所以<code>_t</code>对应的就是<code>renderSlot</code>函数，在定义在<code>src/core/instance/render-helpers/render-slot.js</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">renderSlot</span> <span class="token punctuation">(</span>\n  <span class="token parameter">name<span class="token operator">:</span> string<span class="token punctuation">,</span>\n  fallback<span class="token operator">:</span> <span class="token operator">?</span>Array<span class="token operator">&lt;</span>VNode<span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  props<span class="token operator">:</span> <span class="token operator">?</span>Object<span class="token punctuation">,</span>\n  bindObject<span class="token operator">:</span> <span class="token operator">?</span>Object</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token operator">?</span>Array<span class="token operator">&lt;</span>VNode<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> scopedSlotFn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$scopedSlots<span class="token punctuation">[</span>name<span class="token punctuation">]</span>\n  <span class="token keyword">let</span> nodes\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>scopedSlotFn<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// scoped slot</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    nodes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span> fallback\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> target <span class="token operator">=</span> props <span class="token operator">&amp;&amp;</span> props<span class="token punctuation">.</span>slot\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$createElement</span><span class="token punctuation">(</span><span class="token string">&#39;template&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> slot<span class="token operator">:</span> target <span class="token punctuation">}</span><span class="token punctuation">,</span> nodes<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> nodes\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>对应作用域插槽逻辑不看，它其实是通过<code>this.$slots[name]</code>那到对应<code>slot</code>名的虚拟节点，因为<code>vm.$slots</code>在初始化阶段已经处理。如果拿不到就取<code>fallback</code>，它是插槽节点的默认内容节点。最终，我们子组件就可以拿到对应的父组件插槽模版进行渲染，注意的是，插槽模版的虚拟节点是在父组件渲染完成的，所以模版的状态只能来自父组件实例，这也是和作用域插槽不同的一点。</p><h2 id="作用域插槽" tabindex="-1"><a class="header-anchor" href="#作用域插槽" aria-hidden="true">#</a> 作用域插槽</h2><p>同样，先来看一下例子：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token punctuation">{</span>\n  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;div class=&quot;child&quot;&gt;\n      &lt;slot text=&quot;Hello &quot; :msg=&quot;msg&quot;&gt;&lt;/slot&gt;\n    &lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      msg<span class="token operator">:</span> <span class="token string">&#39;Vue&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  el<span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;div&gt;\n      &lt;Child&gt;\n        &lt;template slot-scope=&quot;props&quot;&gt;\n          &lt;p&gt;Hello from parent&lt;/p&gt;\n          &lt;p&gt;{{props.text + props.msg}}&lt;/p&gt;\n        &lt;/template&gt;\n      &lt;/Child&gt;\n    &lt;/div&gt;\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  components<span class="token operator">:</span> <span class="token punctuation">{</span> Child <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="父组件渲染函数-1" tabindex="-1"><a class="header-anchor" href="#父组件渲染函数-1" aria-hidden="true">#</a> 父组件渲染函数</h3><p>在编译解析阶段处理<code>slot</code>属性的<code>processSlotContent</code>函数命中下面的逻辑：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> slotScope\n<span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;template&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  slotScope <span class="token operator">=</span> <span class="token function">getAndRemoveAttr</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;scope&#39;</span><span class="token punctuation">)</span>\n  el<span class="token punctuation">.</span>slotScope <span class="token operator">=</span> slotScope <span class="token operator">||</span> <span class="token function">getAndRemoveAttr</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;slot-scope&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>slotScope <span class="token operator">=</span> <span class="token function">getAndRemoveAttr</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;slot-scope&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  el<span class="token punctuation">.</span>slotScope <span class="token operator">=</span> slotScope\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>它会在对应的ast节点增加<code>slotScope</code>属性，值为设置的子组件提供的插槽数据，在我们例子就是<code>props</code>。然后在构造ast树的时候，对于有<code>slotScope</code>属性的节点，会执行下面的逻辑：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>slotScope<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> name <span class="token operator">=</span> element<span class="token punctuation">.</span>slotTarget <span class="token operator">||</span> <span class="token string">&#39;&quot;default&quot;&#39;</span>\n  <span class="token punctuation">;</span><span class="token punctuation">(</span>currentParent<span class="token punctuation">.</span>scopedSlots <span class="token operator">||</span> <span class="token punctuation">(</span>currentParent<span class="token punctuation">.</span>scopedSlots <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> element\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>currentParent</code>表示当前ast节点的父节点。这段代码是在作用域插槽节点的父节点上增加一个<code>scopedSlots</code>对象，这个对象是以插槽名为key，插槽ast节点为值的映射对象。在我们例子中，会把<code>template</code>的ast节点添加到Child节点的<code>scopedSlots</code>对象上：</p><img src="http://blog.inoob.xyz/posts/2ad031ec/2.jpg"><p>在代码生成阶段会对拥有<code>scopedSlots</code>属性的节点进行处理：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// scoped slots</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>scopedSlots<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  data <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">genScopedSlots</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> el<span class="token punctuation">.</span>scopedSlots<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>genScopedSlots</code>方法就是对作用域插槽ast节点对象的处理：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">genScopedSlots</span><span class="token punctuation">(</span>\n  <span class="token parameter">el<span class="token operator">:</span> ASTElement<span class="token punctuation">,</span>\n  slots<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> ASTElement <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  state<span class="token operator">:</span> CodegenState</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span> \n\n  <span class="token keyword">const</span> generatedSlots <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>slots<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token function">genScopedSlot</span><span class="token punctuation">(</span>slots<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">scopedSlots:_u([</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>generatedSlots<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">])</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>这个方法对每个具名插槽节点作为参数调用<code>genScopedSlot</code>方法生成代码，并且最后包含在数组里面作为<code>_u</code>的参数。来看下<code>genScopedSlot</code>的定义：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>unction <span class="token function">genScopedSlot</span> <span class="token punctuation">(</span>\n  el<span class="token operator">:</span> ASTElement<span class="token punctuation">,</span>\n  state<span class="token operator">:</span> CodegenState\n<span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>\n\n  <span class="token keyword">const</span> slotScope <span class="token operator">=</span> el<span class="token punctuation">.</span>slotScope <span class="token operator">===</span> emptySlotScopeToken\n    <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>\n    <span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>slotScope<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">function(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>slotScope<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">){</span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">return </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;template&#39;</span>\n      <span class="token operator">?</span> el<span class="token punctuation">.</span>if <span class="token operator">&amp;&amp;</span> isLegacySyntax\n        <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>if<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">genChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;undefined&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:undefined</span><span class="token template-punctuation string">`</span></span>\n        <span class="token operator">:</span> <span class="token function">genChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;undefined&#39;</span>\n      <span class="token operator">:</span> <span class="token function">genElement</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>\n    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}</span><span class="token template-punctuation string">`</span></span>\n\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">{key:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>slotTarget <span class="token operator">||</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&quot;default&quot;</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,fn:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fn<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>这个方法主要是返回一个对象的代码。该对象的key具名插槽的名称，fn为构造的函数代码，它的参数为我们自定义的获取子组件的数据对象，函数体插槽节点的渲染代码。对于我们例子，最后得到的渲染代码为：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">with</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">_c</span><span class="token punctuation">(</span>\n    <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>\n      <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;Child&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        scopedSlots<span class="token operator">:</span> <span class="token function">_u</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            key<span class="token operator">:</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span>\n            <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token punctuation">[</span>\n                <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token string">&#39;Hello from parent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token function">_v</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token function">_s</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>text <span class="token operator">+</span> props<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n              <span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token number">1</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>可以看出来这个和普通插槽的区别就是组件Child没有了<code>children</code>，而是在<code>data</code>增加了<code>scopedSlots</code>属性。它是每个具名插槽对应的模版获取函数，这个在运行时会用到。</p><h3 id="子组件渲染函数-1" tabindex="-1"><a class="header-anchor" href="#子组件渲染函数-1" aria-hidden="true">#</a> 子组件渲染函数</h3><p>对于作用域插槽子组件的生成代码和普通插槽不同的是它会去处理<code>slot</code>标签上的属性，它们合并成一个对象作为<code>_t</code>函数的第三个参数。最终我们子组件的渲染代码为：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">with</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">_c</span><span class="token punctuation">(</span>\n    <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> staticClass<span class="token operator">:</span> <span class="token string">&#39;child&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token function">_t</span><span class="token punctuation">(</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token string">&#39;Hello &#39;</span><span class="token punctuation">,</span> msg<span class="token operator">:</span> msg <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token number">2</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="运行时阶段-1" tabindex="-1"><a class="header-anchor" href="#运行时阶段-1" aria-hidden="true">#</a> 运行时阶段</h3><p>对于父组件在执行<code>render</code>函数时，在创建Child虚拟节点时候会调用<code>_u</code>函数去创建<code>scopedSlots</code>属性的值。该函数定义在<code>src/core/instance/render-helpers/resolve-scoped-slots.js</code>的<code>resolveScopedSlots</code>方法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">resolveScopedSlots</span> <span class="token punctuation">(</span>\n  <span class="token parameter">fns<span class="token operator">:</span> ScopedSlotsData<span class="token punctuation">,</span> \n  res<span class="token operator">?</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>\n  hasDynamicKeys<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>\n  contentHashKey<span class="token operator">?</span><span class="token operator">:</span> number</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> Function<span class="token punctuation">,</span> $stable<span class="token operator">:</span> boolean <span class="token punctuation">}</span> <span class="token punctuation">{</span>\n  res <span class="token operator">=</span> res <span class="token operator">||</span> <span class="token punctuation">{</span> $stable<span class="token operator">:</span> <span class="token operator">!</span>hasDynamicKeys <span class="token punctuation">}</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> slot <span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>slot<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">resolveScopedSlots</span><span class="token punctuation">(</span>slot<span class="token punctuation">,</span> res<span class="token punctuation">,</span> hasDynamicKeys<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>slot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>slot<span class="token punctuation">.</span>proxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        slot<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>proxy <span class="token operator">=</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span>\n      res<span class="token punctuation">[</span>slot<span class="token punctuation">.</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> slot<span class="token punctuation">.</span>fn\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>contentHashKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>res<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>$key <span class="token operator">=</span> contentHashKey\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> res\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>这个函数把传入的插槽获取函数数据转换成一个映射对象。对象的key为插槽的名称，值为插槽模版获取函数。所以，我们例子的Child组件vnode的<code>scopedSlots</code>属性最终为：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span> \n  <span class="token string">&quot;default&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>\n      <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token string">&#39;Hello from parent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">_v</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token function">_s</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>text <span class="token operator">+</span> props<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在我们子组件执行<code>render</code>函数之前有下面一点逻辑：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 作用域插槽处理</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>_parentVnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  vm<span class="token punctuation">.</span>$scopedSlots <span class="token operator">=</span> <span class="token function">normalizeScopedSlots</span><span class="token punctuation">(</span>\n    _parentVnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>scopedSlots<span class="token punctuation">,</span>\n    vm<span class="token punctuation">.</span>$slots<span class="token punctuation">,</span>\n    vm<span class="token punctuation">.</span>$scopedSlots\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这段主要就是把Child组件占位符虚拟节点的<code>scopedSlots</code>最终会赋值到组件实例的<code>$scopedSlots</code>属性上。然后在创建<code>slot</code>虚拟节点的时候执行<code>renderSlot</code>函数会走下面逻辑：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> scopedSlotFn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$scopedSlots<span class="token punctuation">[</span>name<span class="token punctuation">]</span>\n<span class="token keyword">let</span> nodes\n<span class="token keyword">if</span> <span class="token punctuation">(</span>scopedSlotFn<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// scoped slot</span>\n  props <span class="token operator">=</span> props <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  nodes <span class="token operator">=</span> <span class="token function">scopedSlotFn</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">||</span> fallback\n<span class="token punctuation">}</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>其中props是<code>_t</code>函数的第三个参数，也就是我们例子的<code>{ text: &#39;Hello &#39;, msg: msg }</code>。因为创建<code>slot</code>节点是在子组件环境，所以对应的msg也能取到正确的值。然后作为参数传给我们插槽模版获取函数<code>scopedSlotFn</code>，最终创建正确的插槽模版vnode。</p><p>到现在，我们就在子组件中正确渲染我们插入的作用域模版了。你会发现，父组件提供的插槽模版的vnode最终是在子组件执行创建的，也是因为我们模版中用到了子组件的状态，这是和普通插槽原理的最大区别。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>到现在，我们就知道了Vue两种插槽的实现原理。它们两个之间不同的是，普通插槽是在父组件编译和渲染生成好插槽模版vnode，在子组件渲染是直接获取父组件生成好的vnode。作用域插槽在父组件不会生成插槽模版vnode，而是在组件占位vnode上用<code>scopedSlots</code>保存这不同具名插槽的获取模版函数，然后在子组件渲染的时候把prop对象作为参数调用该函数获取正确的插槽模版vnode。</p><p>总之，插槽的实现就是要在子组件生成<code>slot</code>的虚拟节点是能够找到正确的模版和数据作用域。</p>',76),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);