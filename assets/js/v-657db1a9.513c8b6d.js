"use strict";(self.webpackChunkfe_note=self.webpackChunkfe_note||[]).push([[1394],{1788:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-657db1a9",path:"/share/book/webpack.html",title:"webpack实战：入门、进阶与调优",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"简介",slug:"简介",children:[]},{level:2,title:"模块打包",slug:"模块打包",children:[]},{level:2,title:"资源输入输出",slug:"资源输入输出",children:[]},{level:2,title:"预处理器",slug:"预处理器",children:[]},{level:2,title:"样式处理",slug:"样式处理",children:[]},{level:2,title:"代码分片(Code Splitting)",slug:"代码分片-code-splitting",children:[]}],filePathRelative:"share/book/webpack.md",git:{updatedTime:1636304323e3}}},1312:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="webpack实战-入门、进阶与调优" tabindex="-1"><a class="header-anchor" href="#webpack实战-入门、进阶与调优" aria-hidden="true">#</a> webpack实战：入门、进阶与调优</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>webpack是一个模块打包工具，解决脚本式导入的各种问题</p><ul><li>手动维护js的加载顺序</li><li>浪费网络资源请求</li><li>全局作用域污染</li></ul><p>相对于其他打包工具(rollup, Parcel)的特点</p><ul><li>同时支持多个模块标准</li><li>完备的code splitting方案</li><li>可处理多种类型资源</li><li>庞大的社区，多种插件</li></ul><p>webpack-dev-server提供两个作用</p><ul><li>利用webpack打包模块</li><li>监听本地资源请求， 并且提供热刷新(live-reloading，区别于hmr)</li></ul><h2 id="模块打包" tabindex="-1"><a class="header-anchor" href="#模块打包" aria-hidden="true">#</a> 模块打包</h2><p>CommonJS</p><p>规定一个文件就是模块，模块的顶级作用域不再是全局作用域，而是模块对象自身。可以理解成在每个模块头部定义：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token punctuation">{</span>\n  exports<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> exports <span class="token operator">=</span> module<span class="token punctuation">.</span>exports\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>注意: module.exports 和exports不能同时使用</p></blockquote><p>ESM和CommonJS区别</p><ul><li>静态和动态导入</li><li>前者导入的是变量是动态映射，后者只是值的拷贝</li><li>循环依赖处理： CJS不支持， ESM可通过动态映射特性进行处理</li></ul><p>其他模块定义</p><p>AMD，UMD等,加载npm模块获取查找node_modules对应包下面的package.json中main指定的入口文件</p><p>模块打包原理</p><p>把所有打包的接口通过key-value的形式存在一个modules作为参数传递给匿名函数，key是模块的标识，value是用一个函数包裹的模块代码，函数参数是为模块创建作用域隔离。整个modules作为匿名函数的参数，函数体是对__webpack_require__函数的定义以及执行入口模块. require函数定义大概如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> installedModules <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">webpackRequire</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>installedModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> installedModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span>\n    <span class="token keyword">const</span> module <span class="token operator">=</span> installedModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      id<span class="token operator">:</span> moduleId<span class="token punctuation">,</span>\n      loaded<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      exports<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> webpackRequire<span class="token punctuation">)</span>\n    module<span class="token punctuation">.</span>loaded <span class="token operator">=</span> <span class="token boolean">true</span>\n    <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token function">webpackRequire</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&#39;0&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> webpackRequire</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token function">webpackRequire</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;1&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> webpackRequire</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="资源输入输出" tabindex="-1"><a class="header-anchor" href="#资源输入输出" aria-hidden="true">#</a> 资源输入输出</h2><p>webpack会从入口文件开始检索，并将具有依赖关系的模块生成一个依赖树，最终得到一个chunk。这个chunk称为bundle。</p><p><img src="https://wozien-cloud-oss.oss-cn-shenzhen.aliyuncs.com/images/blog/image-20211106162600248.png" alt="image-20211106162600248"></p><p>配置资源入口</p><p>利用entry和context决定打包入口，单一入口用字符串或者数组形式，多入口可以用对象，key为chunk的名字。提取第三方依赖到一个vendor的chunk，防止修改业务代码频繁打包，可以利用splitChunk配置实现。</p><p>配置资源出口</p><ul><li>filename: 指定输出的bundle文件名，控制缓存的情况可以用模板语法，如[chunkhash].js</li><li>path： 指定资源的输出目录，绝对路径</li><li>publicPath: 指定网络资源请求的路径，有三种不同的配置方式 <ul><li>相对路径： 相对于HTML页面， 如 ../assets&#39;</li><li>/开头： 相对于当前域名， 如 &#39;/assets&#39;</li><li>HTTP形式： CDN资源访问, 如 &#39;htttp://mycdn.com/assets&#39;</li></ul></li></ul><h2 id="预处理器" tabindex="-1"><a class="header-anchor" href="#预处理器" aria-hidden="true">#</a> 预处理器</h2><p>webpack本身只能处理js文件，针对其他类型的模块需要预处理器loader转换成webpack能识别的结果。</p><p>loader本质上就是一个函数。函数的输入可能是工程源文件，也可能是上一个loader转换的结果，转化的结果包含文件字符串，source map和AST。loader支持链式调用，比如</p><p>Style 标签 = style-loader(css-loader(sass-loader(SCSS)))</p><p>自定义loader：在js文件头部增加严格模式 &#39;use strict&#39;</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> loaderUtils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;loader-utils&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> SourceNode<span class="token punctuation">,</span> SourceMapConsumer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;source-map&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span> sourceMap</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> useStrictPrefix <span class="token operator">=</span> <span class="token string">&#39;\\&#39;use strict\\&#39; \\n\\n&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheable<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cacheable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// source-map</span>\n  <span class="token keyword">const</span> options <span class="token operator">=</span> loaderUtils<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>sourceMap <span class="token operator">&amp;&amp;</span> sourceMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> currentRequest <span class="token operator">=</span> loaderUtils<span class="token punctuation">.</span><span class="token function">getCurrentRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> node <span class="token operator">=</span> SourceNode<span class="token punctuation">.</span><span class="token function">fromStringWithSourceMap</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SourceMapConsumer</span><span class="token punctuation">(</span>sourceMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    node<span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span>useStrictPrefix<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> result <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">toStringWithSourceMap</span><span class="token punctuation">(</span><span class="token punctuation">{</span> file<span class="token operator">:</span> currentRequest <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>code<span class="token punctuation">,</span> result<span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 不支持source-map的情况</span>\n  <span class="token keyword">return</span> useStrictPrefix <span class="token operator">+</span> content<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="样式处理" tabindex="-1"><a class="header-anchor" href="#样式处理" aria-hidden="true">#</a> 样式处理</h2><p>样式文件提取 extract-text-wepack-plugin</p><p>样式预先处理</p><ul><li><p>SCSS： node-sass sass-loader</p></li><li><p>LESS: less less-loader</p></li></ul><p>PostCSS的作用： 通过插件的方式增强样式</p><ul><li>autoprefixer，自动添加浏览器厂商前缀</li><li>stylelint：样式规则检查</li><li>CSSNext： 使用最新的css特性，做兼容处理</li></ul><p>CSS Modules</p><p>把CSS模块化，让CSS拥有模块的特点</p><ul><li>每个CSS文件样式拥有作用域，不会和外界发生命名冲突</li><li>对CSS进行依赖管理，通过相对路径引入CSS文件</li><li>通过composes轻松复用其他CSS模块</li></ul><h2 id="代码分片-code-splitting" tabindex="-1"><a class="header-anchor" href="#代码分片-code-splitting" aria-hidden="true">#</a> 代码分片(Code Splitting)</h2><p><strong>通过入口划分代码</strong></p><p>对于web应用一些库或者工具不常变动，可以放到一个单独的入口：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// webpack.config.js</span>\nentry <span class="token punctuation">{</span>\n    app<span class="token operator">:</span> <span class="token string">&#39;./app.js&#39;</span><span class="token punctuation">,</span>\n    lib<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;lib-a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lib-b&#39;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// index.html</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dist/lib.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\t\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dist/app.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\t\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这种方式只适用于那些接口绑定在全局对象上的库，比如JQuery，如果要去提取不同入口依赖树的公共模块这种方式配置会很复杂。于是webpack增加对应的配置来处理。</p><p><strong>CommonsChunkPlugin</strong></p><p>webpack4版本之前的配置方式。它支持单入口和多入口公共模块提取。但是存在以下几个不足：</p><ul><li>一个plugin只能提取一个vendor</li><li>对异步模块场景不会按照我们预期工作</li></ul><p><strong>optimization.SplitcChunks</strong></p><p>webpack4版本针对CommonsChunkPlugin问题的改进，有如下特点</p><ul><li>采用声明式配置：只要满足声明条件的模块就会被提取到公共的chunk中</li><li>默认异步提取，可以通过chunks:true来支持所有情况的提取</li></ul><p>默认的提取规则</p><ul><li>提取后的chunk可被共享或者来自node_modules目录</li><li>提取后的js chunk的体积大于30kb， css chunk的体积大于50kb</li><li>在按需加载过程中，并行请求的资源最大值小于等于5</li><li>在首次加载时，并行请求的资源最大值小于等于3</li></ul><p>默认满足上面的条件就会被提取</p><p><strong>资源异步加载</strong></p><p>当模块数量过多，资源体积过大时，可以把一些暂时用不到的模块延迟加载。在webpack主要是使用import()函数的方式， 并且返回一个promise：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// utils.js</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b\n<span class="token punctuation">}</span>\n<span class="token comment">// index.js</span>\n<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./utils&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> add <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>异步加载的原理：动态的在head插入script标签来加载异步chunk</p>',60),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);