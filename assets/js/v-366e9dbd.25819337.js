"use strict";(self.webpackChunkfe_note=self.webpackChunkfe_note||[]).push([[8840],{4680:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-366e9dbd",path:"/summary/tools/git.html",title:"Git 速查",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"配置",slug:"配置",children:[]},{level:2,title:"初始化",slug:"初始化",children:[]},{level:2,title:"提交修改",slug:"提交修改",children:[]},{level:2,title:"查看历史版本、历史操作",slug:"查看历史版本、历史操作",children:[]},{level:2,title:"版本回退、前进",slug:"版本回退、前进",children:[]},{level:2,title:"撤销修改",slug:"撤销修改",children:[]},{level:2,title:"删除与恢复",slug:"删除与恢复",children:[]},{level:2,title:"清理工作区",slug:"清理工作区",children:[]},{level:2,title:"关联GitHub远程仓库",slug:"关联github远程仓库",children:[]},{level:2,title:"克隆GitHub远程仓库",slug:"克隆github远程仓库",children:[]},{level:2,title:"分支管理",slug:"分支管理",children:[]},{level:2,title:"解决合并冲突",slug:"解决合并冲突",children:[]},{level:2,title:"分支管理",slug:"分支管理-1",children:[]},{level:2,title:"开发流程",slug:"开发流程",children:[]},{level:2,title:"References",slug:"references",children:[]}],filePathRelative:"summary/tools/git.md",git:{updatedTime:1635477711e3}}},2251:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="git-速查" tabindex="-1"><a class="header-anchor" href="#git-速查" aria-hidden="true">#</a> Git 速查</h1><p>Git是一个免费的开源分布式版本控制系统，旨在快速高效地处理从小型到大型项目的所有内容。Git易于学习， 占地面积小，具有闪电般的快速性能。它具有Subversion，CVS，Perforce和ClearCase之类的SCM工具，具有廉价的本地分支，方便的暂存区域和多个工作流等功能。</p><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> config --global <span class="token string">&quot;Your Name&quot;</span>\n<span class="token function">git</span> config --global <span class="token string">&quot;Email Address&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> init\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="提交修改" tabindex="-1"><a class="header-anchor" href="#提交修改" aria-hidden="true">#</a> 提交修改</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> status\n<span class="token function">git</span> status -s 文件状态缩略信息, 常见 A:新增<span class="token punctuation">;</span> M:文件变更<span class="token punctuation">;</span> ?:未track<span class="token punctuation">;</span> D:删除\n<span class="token function">git</span> <span class="token function">diff</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>\n<span class="token function">git</span> <span class="token function">diff</span> HEAD -- <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>\t\t查看工作区和版本库里面最新版本的区别\n<span class="token function">git</span> <span class="token function">diff</span> --check <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>     检查是否有空白错误<span class="token punctuation">(</span>regex:<span class="token string">&#39; \\{1,\\}$&#39;</span><span class="token punctuation">)</span>\n<span class="token function">git</span> <span class="token function">diff</span> --cached <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>    查看已add的内容<span class="token punctuation">(</span>绿M<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="查看历史版本、历史操作" tabindex="-1"><a class="header-anchor" href="#查看历史版本、历史操作" aria-hidden="true">#</a> 查看历史版本、历史操作</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> log\n<span class="token function">git</span> reflog\n<span class="token function">git</span> log -n                  最近n条的提交历史\n<span class="token function">git</span> log <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span> -n    分支branch_name最近n条的提交历史\n<span class="token function">git</span> log --stat              历次commit的文件变化\n<span class="token function">git</span> log --shortstat         对比--stat只显示最后的总文件和行数变化统计<span class="token punctuation">(</span>n <span class="token function">file</span> changed, n insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, n deletion<span class="token punctuation">(</span>-<span class="token punctuation">))</span>\n<span class="token function">git</span> log --name-status       显示新增、修改、删除的文件清单\n<span class="token function">git</span> log lhs_hash<span class="token punctuation">..</span>rhs_hash  对比两次commit的变化<span class="token punctuation">(</span>增删的主语为lhs, 如git log HEAD~2<span class="token punctuation">..</span>HEAD <span class="token operator">==</span> <span class="token function">git</span> log HEAD -3<span class="token punctuation">)</span>\n<span class="token function">git</span> log -p                  历次commit的内容增删\n<span class="token function">git</span> log -p -W               历次commit的内容增删, 同时显示变更内容的上下文\n<span class="token function">git</span> log origin/EI-1024 -1 --stat -p -W 查看远端分支EI-1024前一次修改的详细内容\n<span class="token function">git</span> log origin/master<span class="token punctuation">..</span>dev --stat -p -W 查看本地dev分支比远端master分支变化<span class="token punctuation">(</span>修改<span class="token punctuation">)</span>的详细内容\n\n<span class="token function">git</span> log <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span> --oneline   对提交历史单行排列\n<span class="token function">git</span> log <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span> --graph     对提交历史图形化排列\n<span class="token function">git</span> log <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span> --decorate  对提交历史关联相关引用, 如tag, 本地远程分支等\n<span class="token function">git</span> log <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span> --oneline --graph --decorate 拼接一下, 树形化显示历史\n<span class="token function">git</span> log --graph --pretty<span class="token operator">=</span>format:<span class="token string">&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen%ai(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39;</span> --abbrev-commit 同上, 建议alais保存\n\n<span class="token function">git</span> log --pretty<span class="token operator">=</span>format 常用的选项<span class="token punctuation">(</span>摘自progit_v2.1.9<span class="token punctuation">)</span>\n%H 提交对象（commit）的完整哈希字串\n%h 提交对象的简短哈希字串\n%T 树对象（tree）的完整哈希字串\n%t 树对象的简短哈希字串\n%P 父对象（parent）的完整哈希字串\n%p 父对象的简短哈希字串\n%an 作者（author）的名字\n%ae 作者的电子邮件地址\n%ad 作者修订日期（可以用 --date<span class="token operator">=</span> 选项定制格式）\n%ar 作者修订日期，按多久以前的方式显示\n%cn 提交者（committer）的名字\n%ce 提交者的电子邮件地址\n%cd 提交日期\n%cr 提交日期，按多久以前的方式显示\n%s 提交说明\n\n<span class="token function">git</span> log --since --after     显示时间之后的提交\n<span class="token function">git</span> log --until --before    显示时间之前的提交\n<span class="token function">git</span> --author                显示指定作者的提交\n<span class="token function">git</span> --committer             显示指定committer的提交<span class="token punctuation">(</span>注:committer不一定是author<span class="token punctuation">)</span>\n<span class="token function">git</span> log -S <span class="token punctuation">[</span>keyword<span class="token punctuation">]</span>        仅显示添加或移除了某个关键字的提交<span class="token punctuation">(</span>某些场景比单独git log -p <span class="token operator">|</span> <span class="token function">grep</span> <span class="token punctuation">[</span>keyword<span class="token punctuation">]</span> 好用很多<span class="token punctuation">)</span>\n<span class="token function">git</span> log origin/b3.3/master --author<span class="token operator">=</span>yx-ren --since<span class="token operator">=</span><span class="token string">&quot;2019-10-01&quot;</span> --before<span class="token operator">=</span><span class="token string">&quot;2019-11-01&quot;</span> 查看某作者在某发布版本最近一个月的提交, 常见于线上背锅\n<span class="token function">git</span> log origin/b3.0/master --author<span class="token operator">=</span>some_leave --since<span class="token operator">=</span><span class="token string">&quot;1 month ago&quot;</span> 查看某刚离职同事过去一个月的提交, 常见于背锅\n<span class="token function">git</span> log --since<span class="token operator">=</span><span class="token number">1</span>.weeks     过去一周的提交<span class="token punctuation">(</span>写周报的时候可以看看我这一周干了啥<span class="token punctuation">)</span>\n<span class="token function">git</span> log --since<span class="token operator">=</span><span class="token number">1</span>.days      过去一天的提交<span class="token punctuation">(</span>下班的时候可以看看我这一天干了啥<span class="token punctuation">)</span>\n<span class="token function">git</span> log --since<span class="token operator">=</span><span class="token string">&quot;1 weeks 2 days 3 hours 40 minutes 50 seconds ago&quot;</span> 过去1周2天3小时40分50秒之内的提交\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><h2 id="版本回退、前进" tabindex="-1"><a class="header-anchor" href="#版本回退、前进" aria-hidden="true">#</a> 版本回退、前进</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> reset --hard HEAD^\t\t回退到上1版本\n<span class="token function">git</span> reset --hard HEAD~5\t\t回退到上5个版本\n<span class="token function">git</span> reset --hard <span class="token function">id</span>\t\t回退到指定版本\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="撤销修改" tabindex="-1"><a class="header-anchor" href="#撤销修改" aria-hidden="true">#</a> 撤销修改</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> checkout -- <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>\t\t撤销修改：误修改工作区文件，未git add/commit\n<span class="token function">git</span> restore <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>\t\t撤销修改：误修改工作区文件，未git add/commit\n<span class="token function">git</span> reset HEAD <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>\t\t撤销git add：误将文件加入暂存区（git add），未git commit\n<span class="token function">git</span> reset --hard HEAD^\t\t撤销git commit：误将文件提交（一旦提交，只能通过版本回退进行撤销）\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="删除与恢复" tabindex="-1"><a class="header-anchor" href="#删除与恢复" aria-hidden="true">#</a> 删除与恢复</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> rm/add <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>\n<span class="token function">git</span> commit -m <span class="token string">&quot;remove &lt;file&gt;&quot;</span>\t删除版本库中的<span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>：删除工作区文件后，继续删除版本库中相应的文件\n<span class="token function">git</span> checkout -- <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>\t\t根据版本库中的<span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>恢复工作区<span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="清理工作区" tabindex="-1"><a class="header-anchor" href="#清理工作区" aria-hidden="true">#</a> 清理工作区</h2><p>未track也未ignore的文件或文件夹(如各种临时.swp, .patch文件等)</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clean -i    <span class="token comment">#交互式清理, 不常用</span>\n<span class="token function">git</span> clean -n    <span class="token comment">#查看清理文件列表(不包括文件夹), 不执行实际清理动作</span>\n<span class="token function">git</span> clean -n -d <span class="token comment">#查看清理文件列表(包括文件夹), 不执行实际清理动作</span>\n<span class="token function">git</span> clean -f    <span class="token comment">#清理所有未track文件</span>\n<span class="token function">git</span> clean -df   <span class="token comment">#清理所有未track文件和文件夹, 常用, 但使用前确保新增加的文件或文件夹已add, 否则新创建的文件或者文件夹也会被强制删除</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="关联github远程仓库" tabindex="-1"><a class="header-anchor" href="#关联github远程仓库" aria-hidden="true">#</a> 关联GitHub远程仓库</h2><p>本地到远程</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> origin <span class="token operator">&lt;</span>remote address<span class="token operator">&gt;</span>\t在本地工作区目录下按照 GitHub 提示进行关联\n<span class="token function">git</span> remote <span class="token function">rm</span> origin\t\t\t解除错误关联\n<span class="token function">git</span> push -u origin master\t\t第一次将本地仓库推送至远程仓库（每次在本地提交后进行操作）\n<span class="token function">git</span> push origin master\t\t\t以后每次将本地仓库推送至远程仓库（每次在本地提交后进行操作）\n<span class="token operator">&lt;</span>remote address<span class="token operator">&gt;</span>:\n\tgit@github.com:<span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>repository<span class="token operator">&gt;</span>.git\n\thttps://github.com/<span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>repository<span class="token operator">&gt;</span>.git\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="克隆github远程仓库" tabindex="-1"><a class="header-anchor" href="#克隆github远程仓库" aria-hidden="true">#</a> 克隆GitHub远程仓库</h2><p>远程到本地</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone <span class="token operator">&lt;</span>remote address<span class="token operator">&gt;</span>\tgit协议速度更快但通常公司内网不允许，https协议速度慢\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理" aria-hidden="true">#</a> 分支管理</h2><p>创建、切换、查看、合并、删除</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span>\t创建<span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span>分支\n<span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span>\t切换至<span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span>分支\n<span class="token function">git</span> switch <span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span>\t切换至<span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span>分支\n<span class="token function">git</span> checkout -b <span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span>\t创建并切换至<span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span>分支\n<span class="token function">git</span> switch -c <span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span>\t创建并切换至<span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span>分支\n<span class="token function">git</span> branch\t\t\t查看已有分支（* 表示当前分支）\n<span class="token function">git</span> merge <span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span>\t\t合并<span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span>到当前分支（通常在master分支下操作）\n<span class="token function">git</span> branch -d <span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span>\t删除分支\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="解决合并冲突" tabindex="-1"><a class="header-anchor" href="#解决合并冲突" aria-hidden="true">#</a> 解决合并冲突</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> log --graph --pretty<span class="token operator">=</span>oneline --abbrev-commit\n<span class="token function">git</span> log --graph\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="分支管理-1" tabindex="-1"><a class="header-anchor" href="#分支管理-1" aria-hidden="true">#</a> 分支管理</h2><p>合并后删除分支也在 log 中保留分支记录</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> merge --no-ff -m <span class="token string">&quot;descriptions&quot;</span> <span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="开发流程" tabindex="-1"><a class="header-anchor" href="#开发流程" aria-hidden="true">#</a> 开发流程</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>master分支\t\t发布稳定版本\ndev分支\t\t\t发布开发版本\n<span class="token operator">&lt;</span>developer name<span class="token operator">&gt;</span>分支\t个人开发分支（个人开发完成将该分支并入dev，同时保留该分支，继续开发）\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references" aria-hidden="true">#</a> References</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>https://github.com/skywind3000/awesome-cheatsheets/blob/master/tools/git.txt\nhttps://www.liaoxuefeng.com/wiki/896043488029600\nhttps://git-scm.com/book/en/v2\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',37),t={},p=(0,a(3744).Z)(t,[["render",function(n,s){return e}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);